"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3777],{83845:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2023-day11","metadata":{"permalink":"/Low-Code/blog/2023-day11","source":"@site/blog/2023-lcf/2023-02-11/index.md","title":"11. Azure Integration Patterns","description":"Today we\'ll explore some real world use cases that integrate Azure with Power Platform to help you resolve business challenges more efficiently.","date":"2023-02-11T00:00:00.000Z","formattedDate":"February 11, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"28-days-of-lowcode","permalink":"/Low-Code/blog/tags/28-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":8.86,"hasTruncateMarker":false,"authors":[{"name":"Linda Nichols","title":"Principal Solution Spec GBB","url":"https://github.com/lynnaloo","imageURL":"https://github.com/lynnaloo.png","key":"linda"},{"name":"Stephanie Lemus","title":"Principal Solution Spec GBB","url":"https://github.com/stephle00","imageURL":"https://avatars.githubusercontent.com/u/1944974?v=4","key":"stephanie"}],"frontMatter":{"slug":"2023-day11","title":"11. Azure Integration Patterns","authors":["linda","stephanie"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power-platform","azure","fusion teams","integration patterns","low code"],"image":"https://microsoft.github.io/Low-Code/img/og/30-11.png","description":"Today we\'ll explore some real world use cases that integrate Azure with Power Platform to help you resolve business challenges more efficiently.","tags":["low-code-february","28-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"nextItem":{"title":"10. Secure Connectors with APIM","permalink":"/Low-Code/blog/2023-day10"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day11\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"11. Low Code + Azure Integration Patterns\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Today we\'ll explore some real world use cases that integrate Azure with Power Platform to help you resolve busienss challenges more efficiently.\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-10.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@lynnaloo\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day11\\" />\\n</head>\\n\\nWelcome to `Day 11` of #30DaysOfLowCode!\\n\\nThe theme for this week is **backend integration**. Yesterday we talked about building secure connectors with Azure API Management. Today we\'ll explore some real world use cases that integrate Azure with Power Platform to help you resolve busienss challenges more efficiently. Let\'s talk about **Low Code and Azure Integration Patterns!**.\\n\\n## What We\'ll Cover\\n * Why Power Platform and Azure together?\\n * Access data beyond a low code platform\\n * Use Azure API Management use low code development\\n * Low Code + Azure Integration Patterns\\n\\n\\n![Speaker Card for Feb 11](./../../../static/img/og/30-11.png)\\n\\n\\n## Why Power Platform and Azure together?\\n\\nBy using Microsoft Azure to extend the capabilities of Power Platform, you can help solve the App Gap challenge. \\n\\nSimply put, the app gap is a condition where there is an increasing need for custom applications, but you don\'t have enough developers to build the applications in the business units\u2019 backlog. \\n\\nFor many businesses today, the *app gap* is already very real and getting worse.  Current estimates are that the world is currently short some 4m developers \u2026 with an estimated 500 million new apps needing to be built by 2025. This challenge emphasizes the need to find creative and efficient ways to deliver more custom applications to meet the needs of the business with fewer developers.\\n\\n**So how do we build more apps, faster?**\\n\\nWe can accelerate app development by letting pro developers do what they do best: traditional development and increasing the availability of organizational services & data.\\n\\nWe then simultaneously empower low code developers to solve some of their business problems themselves by giving them a low code development platform and controlled access to the right data, APIs & service endpoints.\\n\\nThis is at the heart of the fusion team development concept \u2013 joining professional & low code developers together to:\\n\\n-\\tClose the app gap\\n-\\tBuild applications faster to reduce the organizational app backlog\\n-\\tCreate new developers from untraditional places\\n-\\tIncubate a culture of innovation\\n\\n\\n**Resources:**\\n* [Expedite application delivery with low-code and fusion teams](https://learn.microsoft.com/events/build-2022/odbrk45-expedite-application-delivery-with-low-code-fusion-teams/?WT.mc_id=javascript-82212-ninarasi)\\n* [Fusion Development Ebook](https://learn.microsoft.com/power-apps/guidance/fusion-dev-ebook/?WT.mc_id=javascript-82212-ninarasi)\\n\\n## How do I access data from Microsoft Azure & beyond from a low code platform?\\n\\nPower Platform uses the concept of connectors - wrappers around the OpenAPI specifications - the industry standard for documenting REST APIS. \\n\\nConnectors abstract away the details of the underlying API while still offering a low code interface within Power Platform. Using connectors, low code developers can interact with APIs without having to have coding ability or extensive knowledge of the underlying API or backend systems. Connectors also give a consistent experience when authenticating to APIs without added custom code.\\n\\nPower Platform provides >1000 built-in connectors which enables easy integration with a wide variety of systems & services.  Pre-built connectors include Dynamics 365, Salesforce, SAP and  Microsoft Teams among many others \u2013 in addition to seamless connection to Microsoft Azure services.  \\n\\nTo connect to internal organizational APIs or solutions where there isn\u2019t an existing connector, Power Platform includes the ability to create custom connectors, which can be used as wrappers to APIs exposed through an API Gateway. \\n\\n**Resources:**\\n* [Connectors overview](https://learn.microsoft.com/connectors/connectors/?WT.mc_id=javascript-82212-ninarasi)\\n* [Custom Connectors overview](https://learn.microsoft.com/connectors/custom-connectors/?WT.mc_id=javascript-82212-ninarasi)\\n\\n## Why use Azure API Management (APIM) with low code development?\\n\\nAzure API Management is a cloud-based platform for creating, managing & publishing APIs.  It supports fusion development patterns through:\\n\\n-\\tDecoupling: Abstracting APIs from their backend implementation and hosting them under a single domain/IP address.  The API layer is decoupled from a specific user interface so the same API can be used in both traditional & low code applications.\\n-\\tGovernance: APIM adds an additional control plane for low code development by allowing access only to specified apps & users and not exposing APIs directly.\\n-\\tMonitoring and debugging: Use Azure Application Insights to debug, monitor traffic & configure analytics.\\n-\\tChange Management: Versioning & revision control to manage breaking changes for traditional & low code developers.\\n-\\tInternal Documentation: Creates a catalog of available APIs with downloadable Open API specifications via the Developer Portal.\\n-\\tIntegration with Power Platform: Pushing custom connectors directly to Power Platform environments makes them available at once for use in apps & automation flows.\\n\\n**Resources:**\\n* [What is API Management?](https://learn.microsoft.com/azure/api-management/api-management-key-concepts/?WT.mc_id=javascript-82212-ninarasi)\\n* [Export custom connectors from API Management](https://learn.microsoft.com/azure/api-management/export-api-power-platform/?WT.mc_id=javascript-82212-ninarasi)\\n* [APIM Hands-on Lab](https://azure.github.io/apim-lab/?WT.mc_id=javascript-82212-ninarasi)\\n\\n## Low Code + Azure Integration Patterns\\n\\nThe following technology patterns are generalized with regards to specific use cases but are drawn from real-world customer scenarios using Azure with Power Platform, aka \u201cfusion development.\u201d \\n\\nA common part of many of these fusion architecture patterns is the use of custom connectors that are exported & controlled from Azure API Management.\\n\\n![Feb11](./picture-1.png)\\n\\n \\n**IT Democratization**\\n\\nThis is the most basic pattern for fusion development.  This pattern allows for low code developers, without a coding background, to build applications using their organization\u2019s data. This architecture uses APIs written by pro developers to amplify existing data and expose it to low code developers using an API gateway. \\n\\nThe Azure API Management Developer Portal provides an enterprise catalog which aggregates the data & APIs available to low code & professional developers alike.\\n \\n![Feb11](./it.png)\\n \\n\\n**Resources:**\\n* [Fusion Development Ebook](https://learn.microsoft.com/power-apps/guidance/fusion-dev-ebook/?WT.mc_id=javascript-82212-ninarasi)\\n\\n**AI/ML integrations**\\n\\nAzure includes a rich suite of managed AI and machine learning services, including Azure Cognitive Services and Azure Machine Learning, to more easily build & deploy AI models. \\n\\nBy combining Azure\u2019s AI/ML capabilities with Power Platform, you can build intelligent solutions that bring together the best of both worlds.  For example:\\n\\n*\\tBuilding custom machine learning models in Azure AI services front-ended by a low code app that consumes the resulting models to deliver insights about images & videos uploaded by end users.\\n*\\tAfter using AI/ML on the backend to process large amounts of data, Power Automate workflows can watch the resulting output, triggering custom actions & notifications based on the content.\\n*\\tCreating a low code user interface for data labeling, making it easier for your business subject matter experts to label their datasets for use in training new custom Azure machine learning experiments.\\n\\n![Feb11](./aiml.png)\\n \\n\\n**Resources:**\\n* [Azure Cognitive Services overview](https://azure.microsoft.com/products/cognitive-services/#overview/?WT.mc_id=javascript-82212-ninarasi)\\n* [Azure Machine Learning](https://azure.microsoft.com/products/machine-learning/#product-overview/?WT.mc_id=javascript-82212-ninarasi)\\n* [Azure Open AI](https://azure.microsoft.com/products/cognitive-services/openai-service/?WT.mc_id=javascript-82212-ninarasi)\\n* [Custom Vision + Power Apps Demo](https://github.com/appdevgbb/power-apps-custom-vision/?WT.mc_id=javascript-82212-ninarasi)\\n* [Power Apps and Azure Cognitive Services Demo](https://www.youtube.com/watch?v=ka_yY77b-0M/?WT.mc_id=javascript-82212-ninarasi)\\n\\n**IoT/Event-driven Systems** \\n\\nIoT systems can generate large amounts of data from connected devices. By integrating Power Platform with Azure IoT, you can build custom low code apps & workflows that act on the IoT device data. \\n\\nFor example:\\n\\n*\\tAzure IoT Hub can collect & process data from IoT Devices, while Power Apps + Power BI can be used to build custom dashboards to supply insights & visualizations of the data.\\n*\\tDesigning Power Automate workflows that are only triggered based on specific events or conditions which then send notifications to other systems, like Microsoft Teams.\\n*\\tBuilding fast, low-code interfaces for remote command & control of IoT edge devices.\\n\\n ![Feb11](./iot.png)\\n\\n**Resources:**\\n* [Azure IoT Hub overview](https://azure.microsoft.com/products/iot-hub/#overview/?WT.mc_id=javascript-82212-ninarasi)\\n* [Messaging Services on Azure Overview](https://azure.microsoft.com/solutions/messaging-services/#overview/?WT.mc_id=javascript-82212-ninarasi)\\n* [Tornado Warning System Demo](https://github.com/appdevgbb/tornado-watchdog/?WT.mc_id=javascript-82212-ninarasi)\\n\\n**On-prem data with Azure and Power Platform**\\n\\nSometimes organizations have security requirements that require isolated communication between resources in the cloud and on-premises. By using Azure with on-premises systems, you can create a dedicated and private connection and bypass the public internet. \\n\\nBy using API Management in an Azure VNET (Virtual Network), you can also create secure connections between APIs and their backend services. Access to these APIs can be restricted to only allowing access to designated, trusted interfaces, such as Power Platform. This pattern has some of the same accessibility benefits of IT Democratization, but while respecting the security & isolation requirements of the business.\\n\\n\\n![Feb11](./onprem.png)\\n\\n**Resources:**\\n* [Connect to a VNET using APIM](https://learn.microsoft.com/azure/api-management/api-management-using-with-vnet?tabs=stv2/?WT.mc_id=javascript-82212-ninarasi)\\n* [Export a Custom connector from APIM](https://learn.microsoft.com/azure/api-management/export-api-power-platform/?WT.mc_id=javascript-82212-ninarasi)\\n* [Custom connector for Azure AD-protected Apps](https://learn.microsoft.com/connectors/custom-connectors/create-custom-connector-aad-protected-azure-functions/?WT.mc_id=javascript-82212-ninarasi)\\n* [Protect APIM with Azure AD](https://learn.microsoft.com/azure/api-management/api-management-howto-protect-backend-with-aad/?WT.mc_id=javascript-82212-ninarasi)\\n\\n**Azure Communication Services + Power Platform**\\n\\nAzure Communication Services allows you to add voice, video, and messaging capabilities to your applications. By integrating Power Platform with Azure Communication Services, you can build custom low code applications that easily incorporate these communication capabilities.\\n\\nCommon communication & low code scenarios include:\\n\\n*\\tCreate a flow using Power Automate to send out omnichannel notifications via email, SMS, and chat.\\n*\\tUsing Power Automate to create Event Grid triggered flows to process inbound communication events such as incoming calls or SMS messages.\\n*\\tUsing Azure Cognitive services, Azure Communication Services, and Power Automate together to do sentiment analysis that empowers support personnel to create contextual, personalized responses for end users.\\n*\\tCreate a Power App low code UI to trigger communication workflows and manage communication related metadata, like chat/SMS history.\\n \\n ![Feb11](./acs.png)\\n\\n**Resources:**\\n*\\t[Azure Communication Services overview](https://learn.microsoft.com/azure/communication-services/overview/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[SMS Connector](https://powerautomate.microsoft.com/connectors/details/shared_azurecommunicationservicessms/azure-communication-services-sms/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[Email Connector](https://powerautomate.microsoft.com/connectors/details/shared_acsemail/azure-communication-services-email/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[Chat Connector](https://powerautomate.microsoft.com/connectors/details/shared_acschat/azure-communication-services-chat/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[Identity Connector](https://powerautomate.microsoft.com/connectors/details/shared_acsidentity/azure-communication-services-identity/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[Integrate sentiment analysis with SMS](https://aka.ms/lowCode/sentimentanalysis)\\n\\n**Mainframe Modernization and Extension**\\n\\nAzure integration services unlocks the ability to access & use Mainframe data.  Old green screen mainframe apps can be modernized to use modern technologies such as advanced data analytics & AI/ML services. \\n\\nBy combining Power Platform with mainframe application data, you can unlock data and democratize development that was previously limited to only professional developers. You can build low code user-friendly interfaces for accessing and working with Mainframe data, making it easier for non-technical users to interact with data. For example:\\n\\n\u2022\\tIngesting real-time data, like telemetry & system alerts, that trigger Power Automate flows and send notifications to Microsoft Teams. \\n\u2022\\tUsing Power Apps to create user interfaces that allow users to view, manage, and create visualizations for Mainframe application data.\\n\\n![Feb11](./mainframe.png) \\n\\n**Resources:**\\n* [Low-Code Meets Mainframe: Kyndryl data pipeline](https://ignite.microsoft.com/sessions/691884e3-273a-46eb-99ee-a0c761c86a1e?source=sessions/?WT.mc_id=javascript-82212-ninarasi)\\n\\n## Conclusion\\n\\nThese Azure low code patterns are just a few of the many integration patterns that bring together the best of both worlds. \\n\\nThe combination of Azure & Power Platform supplies a comprehensive set of tools for building internal APIs to access your organization\'s data, designing AI experiments, and programming IoT devices.  \\n\\nOur low code platform\u2019s capabilities help you quickly solve complex business problems & address the app gap problem with the fusion development process. \\n\\n** Get Started Today?** \\n\\n - [**Cloud Skills Challenge**](https://aka.ms/lowcode-february/challenge): Sign up for a month-long challenge and clime up the leaderboard\\n - [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi): Enable millions of low code devs by building custom connectors\\n - [**Learn Collection** ](https://aka.ms/lowcode-february/collection): #30DaysOfLowCode resources center"},{"id":"2023-day10","metadata":{"permalink":"/Low-Code/blog/2023-day10","source":"@site/blog/2023-lcf/2023-02-10/index.md","title":"10. Secure Connectors with APIM","description":"Throughout this post, let\'s discuss how Azure API Management can offer extra security to Power Platform custom connectors.","date":"2023-02-10T00:00:00.000Z","formattedDate":"February 10, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"28-days-of-lowcode","permalink":"/Low-Code/blog/tags/28-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":15.765,"hasTruncateMarker":false,"authors":[{"name":"Justin Yoo","title":"Senior Cloud Advocate (.NET)","url":"https://github.com/justinyoo","imageURL":"https://github.com/justinyoo.png","key":"justin"},{"name":"Julia Kasper","title":"Program Manager II","url":"https://github.com/juliajuju93","imageURL":"https://github.com/juliajuju93.png","key":"julia"}],"frontMatter":{"slug":"2023-day10","title":"10. Secure Connectors with APIM","authors":["justin","julia"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power-platform","custom-connector","api-management","apim","security","authn","authentication","authorization"],"image":"https://microsoft.github.io/Low-Code/img/og/30-10.png","description":"Throughout this post, let\'s discuss how Azure API Management can offer extra security to Power Platform custom connectors.","tags":["low-code-february","28-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"11. Azure Integration Patterns","permalink":"/Low-Code/blog/2023-day11"},"nextItem":{"title":"9b. Use the Custom Connector","permalink":"/Low-Code/blog/2023-day9-use"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://microsoft.github.io/Low-Code/blog/2023-day10\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Providing Power Platform custom connector with additional security via Azure API Management\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Throughout this post, let\'s discuss how Azure API Management can offer extra security to Power Platform custom connectors\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://microsoft.github.io/Low-Code/img/og/30-10.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@justinchronicle\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://microsoft.github.io/Low-Code/blog/2023-day10\\" />\\n</head>\\n\\nWelcome to `Day 10` of #30DaysOfLowCode!\\n\\nThe theme for this week is **backend**. Yesterday we talked about building custom connectors. Today we\'ll explore the topic of _providing Power Platform custom connectors with additional security via [Azure API Management][az apim]_. Ready? Let\'s go!\\n\\n## What We\'ll Cover\\n\\n- [**Authentication Types**](#power-platform-custom-connector-authentication-types) for Custom Connectors\\n- [**Prerequisites**](#prerequisites)\\n- [**Deploying**](#deploying-sample-apps) Sample Apps\\n  1. [API Key Auth](#1-api-key-auth)\\n  2. [Basic Auth](#2-basic-auth)\\n  3. [OAuth2 \u2013 Authorisation Code Auth](#3-oauth2--authorisation-code-auth)\\n  4. [BFF (Backends-for-Frontends) \u2013 Combine API Key Auth & Basic Auth](#4-bff-backends-for-frontends--combination-of-api-key-auth-and-basic-auth)\\n- [**Exercise**](#exercise--try-it-yourself) \u2013 Try it yourself!\\n- [**Resources**](#resources--for-self-study) \u2013 For self-study!\\n\\n![Empty Banner Placeholder](./../../../static/img/og/30-10.png)\\n\\n\\n## Custom Connector Authentication Types\\n\\nPower Platform custom connectors currently support [four authentication flow options &ndash; No Auth flow, API Key Auth flow, Basic Auth flow and OAuth2 Authorisation Code Auth flow][az pp cuscon authn]. \\"No Auth flow\\" is definitely not an option this time, but let\'s focus on the other three options throughout this post. You also need to be aware that those authentication types are mutually exclusive. In other words, you CANNOT combine two or more authentication scenarios on one custom connector. Also, if you want to use the API Key auth flow, you CANNOT use the other two authentication types within the custom connector. I\'ll discuss that later in this post.\\n\\n\\n## Prerequisites\\n\\nFor this post, you need to have the following signed up:\\n\\n- [Microsoft 365 Developer Program][m365 dev]\\n- [Power Platform Developer Program][pp dev]\\n- [Free Microsoft Azure subscription][az free]\\n- [Free GitHub account][gh free]\\n\\n\\n## Deploying Sample Apps\\n\\nLet\'s deploy the sample apps for this post. Fork [this repository][gh sample] and follow the detailed instruction on its README to provision and deploy the sample apps. Once everything is done, you will have one [API Management][az apim] instance and three [Azure Functions][az fncapp] app instances representing authentication scenarios like API Key Auth, Basic Auth and OAuth2 Auth, respectively.\\n\\n![Azure resources provisioned](./image-01.png)\\n\\nEach function app has already been integrated with API Management. Let\'s take a look at each authentication type.\\n\\n\\n### 1. API Key Auth\\n\\nThe first option is using an API key to provide extra security. Using Azure API Management, you can choose between:\\n\\n- A concept called [subscription][az apim subscription], where you use the subscription key through a HTTP request header of `Ocp-Apim-Subscription-Key`\\n- Or you can use a HTTP request query string of `subscription-key`.\\n\\nBoth options add another security layer to your API, in addition to your Azure Function app\'s `x-functions-key` in the request header or `code` in the request querystring.\\n\\n1. Let\'s take a look at the [API policy configurations][az apim policies] in API Management.\\n\\n    ![API Key Auth - API policy](./image-02.png)\\n\\n   Through this policy, the function app\'s API key is integrated. Therefore, you don\'t need to worry about the function app\'s API key.\\n\\n1. Now, you want to add the API Management\'s API key. First, make sure your API settings have enabled the subscription. Also, ensure that no user authorization is enabled by selecting \\"None\\" against the \\"User authorization\\" option.\\n\\n    ![API Key Auth - enable subscription](./image-03.png)\\n\\n1. Export the OpenAPI document by selecting the \\"Export\\" menu and choosing the \\"OpenAPI v2 (JSON)\\" option. Then you will be able to download an OpenAPI document.\\n\\n    ![API Key Auth - export OpenAPI document](./image-04.png)\\n\\n   You might have a question here.\\n\\n   > What does the \\"Create Power Connector\\" menu do? Isn\'t that for this API key auth?\\n\\n   That\'s actually a valid question. The only difference between exporting the OpenAPI document and creating the connector directly through the menu is that which tenant you want to export the connector to. If you want to only use within your tenant, the \\"Create Power Connector\\" is a simple and easy way to generate a custom connector. However, if your connector is not only for your tenant, but also other tenant, you should export the OpenAPI document and use it in the other tenants.\\n\\n   Therefore, throughout this post, you\'re assuming to use this custom connector in general purpose, rather than tied with your tenant.\\n\\n1. Let\'s take a look at the document. It might look like the following JSON document, saying that you MUST use the API key through `Ocp-Apim-Subscription-Key` in the request header or `subscription-key` in the request querystring.\\n\\n    ```jsonc\\n    {\\n      \\"swagger\\": \\"2.0\\",\\n      ...\\n      \\"securityDefinitions\\": {\\n        \\"apiKeyHeader\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"Ocp-Apim-Subscription-Key\\",\\n          \\"in\\": \\"header\\"\\n        },\\n        \\"apiKeyQuery\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"subscription-key\\",\\n          \\"in\\": \\"query\\"\\n        }\\n      },\\n      \\"security\\": [\\n        {\\n          \\"apiKeyHeader\\": []\\n        },\\n        {\\n          \\"apiKeyQuery\\": []\\n        }\\n      ],\\n      \\"paths\\": {\\n        ...\\n      }\\n      ...\\n    }\\n    ```\\n\\n1. Alright. Let\'s import this OpenAPI document for a custom connector. Go to either `https://make.powerapps.com` for Power Apps or `https://make.powerautomate.com` for Power Automate, and create a custom connector by importing an OpenAPI file.\\n\\n    ![API Key Auth - custom connector by OpenAPI file](./image-05.png)\\n\\n1. It automatically identifies the authentication type to \\"API Key\\", the API key parameter name of `Ocp-Apim-Subscription-Key` and the parameter location of \\"Header\\".\\n\\n    ![API Key Auth - custom connector authentication type](./image-06.png)\\n\\n1. After creating the connector, let\'s create a connection for the connector. Then, it requires the API key. Enter the API key generated from the API Management.\\n\\n    ![API Key Auth - custom connector connection](./image-07.png)\\n\\n1. Test the connector to see whether it works OK or not.\\n\\n    ![API Key Auth - custom connector test](./image-08.png)\\n\\nWe\'ve added extra security to the custom connector with API Management\'s API key.\\n\\n\\n### 2. Basic Auth\\n\\nThe second option is to use the basic auth flow. It\'s important to know that **API Management doesn\'t support this basic auth flow out-of-the-box**. Although it\'s a limitation, you can still apply this flow for the Power Platform custom connectors by slightly modifying the OpenAPI document.\\n\\n1. Let\'s take a look at the API policy, which is basically the same as the one in the previous section &ndash; integrate the function app\'s API key with API Management.\\n\\n    ![Basic Auth - API policy](./image-09.png)\\n\\n1. Make sure that you\'re not going to use the subscription key at this time. Therefore, disable the subscription key. By doing so, you no longer need the API key for this API.\\n\\n    ![Basic Auth - disable subscription](./image-10.png)\\n\\n    It\'s also worth noting that because the custom connector sends the basic auth token to the function app through API Management, it\'s safe to assume that the function app is able to understand the token and process it.\\n\\n1. Once you\'re ready, export the OpenAPI document by selecting the \\"Export\\" menu and choosing the \\"OpenAPI v2 (JSON)\\" option.\\n\\n    ![Basic Auth - export OpenAPI document](./image-11.png)\\n\\n1. Then, you will be able to download an OpenAPI document. Let\'s take a look at the document. It might look like the following JSON document, saying that you MUST use either `Ocp-Apim-Subscription-Key` in the request header or `subscription-key` in the request querystring.\\n\\n   However, you MUST replace both with the basic auth because you will not use the API key auth this time.\\n\\n    ```jsonc\\n    {\\n      \\"swagger\\": \\"2.0\\",\\n      ...\\n      \\"securityDefinitions\\": {\\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        \\"apiKeyHeader\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"Ocp-Apim-Subscription-Key\\",\\n          \\"in\\": \\"header\\"\\n        },\\n        \\"apiKeyQuery\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"subscription-key\\",\\n          \\"in\\": \\"query\\"\\n        },\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n    \\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Add \'basicAuth\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        \\"basicAuth\\": {\\n          \\"type\\": \\"basic\\"\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Add \'basicAuth\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n      },\\n      \\"security\\": [\\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        {\\n          \\"apiKeyHeader\\": []\\n        },\\n        {\\n          \\"apiKeyQuery\\": []\\n        },\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n    \\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Add \'basicAuth\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        {\\n          \\"basicAuth\\": []\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Add \'basicAuth\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n      ],\\n      \\"paths\\": {\\n        ...\\n      }\\n      ...\\n    }\\n    ```\\n\\n1. Once you update the OpenAPI document, let\'s import this OpenAPI document for a custom connector. Go to either `https://make.powerapps.com` for Power Apps or `https://make.powerautomate.com` for Power Automate, and create a custom connector by importing an OpenAPI file.\\n\\n    ![Basic Auth - custom connector by OpenAPI file](./image-12.png)\\n\\n1. It automatically identifies the authentication type as \\"Basic authentication\\", \\"username\\", and \\"password\\".\\n\\n    ![Basic Auth - custom connector authentication type](./image-13.png)\\n\\n1. After creating the connector, let\'s create a connection for the connector. Then, it requires the username and password. The username and password in this sample app are for [Atlassian Jira][atlassian jira]. Therefore, get your email address as the username and API token as the password from there.\\n\\n    ![Basic Auth - custom connector connection](./image-14.png)\\n\\n1. Test the connector to see whether it works OK or not.\\n\\n    ![Basic Auth - custom connector test](./image-15.png)\\n\\nWe\'ve added extra security to the custom connector with basic auth.\\n\\n\\n### 3. OAuth2 - Auth Code\\n\\nThe third option is to use [OAuth2][oauth2]. There are many authentication flows in OAuth2, but Power Platform custom connector only supports the [Authorisation code auth flow][az ad authn authcodeauth] at this time of writing. Therefore, let\'s focus on that. The basic idea of using any OAuth2 auth flow is to get the access token and the resources you want. It\'s safe to assume that the function app is able to understand the access token and process it.\\n\\n1. To use OAuth2 auth flow, you need to first [register an app][az ad register app] in [Azure Active Directory][az ad]. After registering a new app, it will give the ability to get the access codes. I\'m not going into too many details here, but it\'s worth taking a look at [this document][gh sample authcodeauth readme]. Once you create the app, you will have the following information:\\n\\n    - Tenant ID\\n    - Client ID\\n    - Client secret\\n    - Endpoint URL for authorization\\n    - Endpoint URL for the access token\\n    - Endpoint URL for the refresh token\\n\\n1. With this information, you need to integrate it with API Management. Go to Azure Portal, open the API Management instance, and navigate to the \\"OAuth 2.0 + OpenID Connect\\" blade. Add a new OAuth2 service under the \\"OAuth 2.0\\" tab.\\n\\n    ![Auth Code Auth - new OAuth2 service](./image-16.png)\\n\\n1. Enter the following details in the fields and create the service.\\n\\n    - Display name: `AuthCode Auth`\\n    - Client registration page URL: `http://localhost`\\n    - Authorization grant types: tick only on \\"Authorization code\\"\\n    - Authorization endpoint URL: endpoint URL for authorization noted from the above\\n    - Token endpoint URL: endpoint URL for access token noted from the above\\n    - Default scope: `https://graph.microsoft.com/.default`\\n    - Client ID: client ID noted from the above\\n    - Client secret: client secret noted from the above\\n\\n    After that, you will have both redirect URLs:\\n\\n    - `null/signin-oauth/code/callback/authcode-auth`\\n    - `null/signin-oauth/implicit/callback`\\n\\n    Replace `null` with your API Management instance URL like `https://{{APIM_NAME}}.azure-api.net`, where `{{APIM_NAME}}` is your API Management instance name.\\n\\n1. Add both redirect URLs to your registered app on Azure AD as redirect URLs.\\n\\n1. Check out the API policy, which is basically the same as in the previous sections &ndash; integrate the function app\'s API key with API Management.\\n\\n    ![Auth Code Auth - API policy](./image-17.png)\\n\\n1. Make sure you will not use the subscription key this time. Therefore, disable the subscription key. By doing so, you no longer need the API key for this API. In addition to this, because you\'re using OAuth2 authorization, choose the \\"OAuth 2.0\\" option and select the OAuth 2.0 server of \\"AuthCode Auth\\" that you just created right before.\\n\\n    ![Auth Code Auth - disable subscription](./image-18.png)\\n\\n    It\'s also worth noting that because the custom connector sends the OAuth2 access token to the function app through API Management, it\'s safe to assume that the function app is able to understand the token and process it.\\n\\n1. Once you\'re ready, export the OpenAPI document by selecting the \\"Export\\" menu and choosing the \\"OpenAPI v2 (JSON)\\" option.\\n\\n    ![Auth Code Auth - export OpenAPI document](./image-19.png)\\n\\n1. Then, you will be able to download an OpenAPI document. Let\'s take a look at the document. It might look like the following JSON document, saying that you MUST use either `Ocp-Apim-Subscription-Key` in the request header or `subscription-key` in the request querystring.\\n\\n   However, you MUST remove both because you will not use the API key auth this time. Make sure you MUST replace `{{TENANT_ID}}` with your tenant ID.\\n\\n    ```jsonc\\n    {\\n      \\"swagger\\": \\"2.0\\",\\n      ...\\n      \\"securityDefinitions\\": {\\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        \\"apiKeyHeader\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"Ocp-Apim-Subscription-Key\\",\\n          \\"in\\": \\"header\\"\\n        },\\n        \\"apiKeyQuery\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"subscription-key\\",\\n          \\"in\\": \\"query\\"\\n        },\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n    \\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Keep \'oauth2AuthCode Auth\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        \\"oauth2AuthCode Auth\\": {\\n          \\"type\\": \\"oauth2\\",\\n          \\"scopes\\": {\\n            \\"https://graph.microsoft.com/.default\\": \\"\\"\\n          },\\n          \\"flow\\": \\"accessCode\\",\\n          \\"authorizationUrl\\": \\"https://login.microsoftonline.com/{{TENANT_ID}}/oauth2/v2.0/authorize\\",\\n          \\"tokenUrl\\": \\"https://login.microsoftonline.com/{{TENANT_ID}}/oauth2/v2.0/token\\"\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Keep \'oauth2AuthCode Auth\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n      },\\n      \\"security\\": [\\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        {\\n          \\"apiKeyHeader\\": [],\\n          \\"oauth2AuthCode Auth\\": [\\n            \\"https://graph.microsoft.com/.default\\"\\n          ]\\n        },\\n        {\\n          \\"apiKeyQuery\\": [],\\n          \\"oauth2AuthCode Auth\\": [\\n            \\"https://graph.microsoft.com/.default\\"\\n          ]\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n    \\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Add \'oauth2AuthCode Auth\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        {\\n          \\"oauth2AuthCode Auth\\": [\\n            \\"https://graph.microsoft.com/.default\\"\\n          ]\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Add \'oauth2AuthCode Auth\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n      ],\\n      \\"paths\\": {\\n        ...\\n      }\\n      ...\\n    }\\n    ```\\n\\n1. Once you update the OpenAPI document, let\'s import this OpenAPI document for a custom connector. Go to either `https://make.powerapps.com` for Power Apps or `https://make.powerautomate.com` for Power Automate, and create a custom connector by importing an OpenAPI file.\\n\\n    ![Auth Code Auth - custom connector by OpenAPI file](./image-20.png)\\n\\n1. It automatically identifies the authentication type to \\"OAuth 2.0\\" and the Identity Provider of \\"Generic OAuth 2\\". Then, enter the Client ID, Client secret, and the Refresh URL noted above. Using a different registered app here is OK if it\'s under the same tenant.\\n\\n    ![Auth Code Auth - custom connector authentication type](./image-21.png)\\n\\n1. After creating the connector, let\'s create a connection for the connector. As you\'ve already provided the client ID and secret, you will immediately create the connection.\\n\\n1. Test the connector to see whether it works OK or not.\\n\\n    ![Auth Code Auth - custom connector test](./image-22.png)\\n\\nWe\'ve added extra security to the custom connector with OAuth2 - authorization code auth.\\n\\n\\n### 4. BFF - Combine Auth\\n\\nMany organisations nowadays have requirements using the [BFF (Backends-for-frontends) pattern][az patterns architecture bff] through API Management, mainly if your organisation adopts microservice architecture. It\'s not uncommon that APIs use different authentication approaches for different APIs &ndash; one uses the API key auth, another uses the basic key auth, and the other uses the OAuth2 auth.\\n\\nIf you are about to build a BFF with those APIs using different authentication methods, what would you do? What could you do if you\'re even about to create the BFF for the Power Platform custom connector? There are many different combinations of authentication methods, but let\'s focus on following two &ndash; API key auth and basic auth:\\n\\n1. First of all, you MUST choose which authentication type you will use for the main one for the Power Platform custom connector. If you want to use basic auth as the main one, the custom connector doesn\'t have to know the API key and vice versa. In other words, the other authentication method MUST be handled by the API Management policy of the BFF API.\\n\\n1. Let\'s take a look at [this OpenAPI document][gh sample openapi bff] for BFF. It combines both apps using the API key auth and basic auth, respectively.\\n\\n    ```yaml\\n    openapi: 3.0.1\\n    ...\\n    paths:\\n      /greeting:\\n        get:\\n          tags:\\n            - greeting\\n          summary: Greeting\\n          operationId: Greeting\\n          ...\\n          security:\\n            - apiKeyHeader: [ ]\\n            - apiKeyQuery: [ ]\\n      /profile:\\n        get:\\n          tags:\\n            - profile\\n          summary: Profile\\n          operationId: Profile\\n          ...\\n          security:\\n            - apiKeyHeader: [ ]\\n            - apiKeyQuery: [ ]\\n            - basicAuth: [ ]\\n    ...\\n    components:\\n      ...\\n      securitySchemes:\\n        apiKeyHeader:\\n          type: apiKey\\n          name: Ocp-Apim-Subscription-Key\\n          in: header\\n        apiKeyQuery:\\n          type: apiKey\\n          name: subscription-key\\n          in: query\\n        basicAuth:\\n          type: http\\n          scheme: basic\\n    ```\\n\\n   It defines API key auth and basic auth in the document and applies them to each endpoint.\\n\\n1. Import this OpenAPI to API Management. Then check out the settings. Make sure you MUST activate the subscription.\\n\\n    ![BFF - enable subscription](./image-23.png)\\n\\n1. Add the [`authentication-basic` as an inbound policy][az apim policies basicauth] that sets the basic auth token to the request header. After this, API Management automatically injects this basic auth token into every request header.\\n\\n    ![BFF - basic authentication policy](./image-24.png)\\n\\n1. Export the OpenAPI document. As you use the API key auth, follow the [1. API Key Auth](#1-api-key-auth) pattern.\\n\\n1. In the Power Platform custom connector, you only need the API key provided by API Management to create the connection because API Management has already encapsulated the basic auth token.\\n\\n1. Test the connector to see whether it works OK or not. As you can see, both endpoints work perfectly fine.\\n\\n    ![BFF - custom connector test](./image-25.png)\\n\\nWe\'ve created a BFF by combining APIs that use API key auth and basic auth, and the BFF has been used for the Power Platform custom connector. However, as mentioned earlier in this post, we have to choose only one authentication type due to the restriction of authentication types in the Power Platform custom connector. Therefore, if you need more than one authentication type for your connector, you MUST choose one, and API Management MUST encapsulate all the others.\\n\\nTheoretically, there are three possible combinations for BFF:\\n\\n- API key auth and basic auth\\n- API key auth and OAuth2 auth code auth\\n- Basic auth and OAuth2 auth code auth\\n\\nThroughout this post, we\'ve walked through the first combination. After that, you can try the other two combinations on your end!\\n\\n\\n## Exercise &ndash; Try it yourself!\\n\\nIf you haven\'t joined the following programs, it\'s time to do so for further learning!\\n\\n- [Microsoft 365 Developer Program][m365 dev]\\n- [Power Platform Developer Program][pp dev]\\n- [Free Microsoft Azure subscription][az free]\\n- [Free GitHub account][gh free]\\n\\nThen, follow the steps below. After that, you will be the one who knows better security on Power Platform custom connectors!\\n\\n- Fork this [GitHub repository][gh sample] to provision and deploy the sample apps.\\n- Read and follow the instructions for each scenario:\\n  - [API Key Auth][gh sample apikeyauth readme]\\n  - [Basic Auth][gh sample basicauth readme]\\n  - [Authorisation Code Auth][gh sample authcodeauth readme]\\n  - [BFF][gh sample bff readme]\\n\\n\\n## Resources &ndash; Self-Study\\n\\n- [Cloud architecture pattern &ndash; BFF (Backends-for-frontends)][az patterns architecture bff]\\n- [Azure AD application model][az ad register app]\\n- [Azure API Management authentication and authorisation][az apim security authn]\\n- [Power Platform custom connector parameters][az pp cuscon authn]\\n- [Creating Microsoft 365 Developer Environment][m365 dev create]\\n\\n\\n[gh sample]: https://github.com/devkimchi/power-platform-connector-via-apim\\n[gh sample apikeyauth readme]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/src/ApiKeyAuthApp/README.md\\n[gh sample basicauth readme]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/src/BasicAuthApp/README.md\\n[gh sample authcodeauth readme]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/src/AuthCodeAuthApp/README.md\\n[gh sample bff readme]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/src/BffApp/README.md\\n[gh sample openapi bff]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/infra/apim-openapi-bff.yaml\\n\\n[az patterns architecture bff]: https://learn.microsoft.com/azure/architecture/patterns/backends-for-frontends?WT.mc_id=dotnet-82212-juyoo\\n\\n[az ad]: https://learn.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-82212-juyoo\\n[az ad authn authcodeauth]: https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow?WT.mc_id=dotnet-82212-juyoo\\n[az ad register app]: https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app?WT.mc_id=dotnet-82212-juyoo\\n\\n[az apim]: https://learn.microsoft.com/azure/api-management/api-management-key-concepts?WT.mc_id=dotnet-82212-juyoo\\n[az apim policies]: https://learn.microsoft.com/azure/api-management/api-management-howto-policies?WT.mc_id=dotnet-82212-juyoo\\n[az apim policies setheader]: https://learn.microsoft.com/azure/api-management/set-header-policy?WT.mc_id=dotnet-82212-juyoo\\n[az apim policies basicauth]: https://learn.microsoft.com/azure/api-management/authentication-basic-policy?WT.mc_id=dotnet-82212-juyoo\\n[az apim subscription]: https://learn.microsoft.com/azure/api-management/api-management-subscriptions?WT.mc_id=dotnet-82212-juyoo\\n[az apim security authn]: https://learn.microsoft.com/azure/api-management/authentication-authorization-overview?WT.mc_id=dotnet-82212-juyoo\\n\\n[az fncapp]: https://learn.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=dotnet-82212-juyoo\\n\\n[az pp cuscon authn]: https://learn.microsoft.com/connectors/custom-connectors/connection-parameters?WT.mc_id=dotnet-82212-juyoo\\n\\n[atlassian jira]: https://www.atlassian.com/software/jira\\n[oauth2]: https://oauth.net/2/\\n\\n[m365 dev]: https://learn.microsoft.com/office/developer-program/microsoft-365-developer-program?WT.mc_id=dotnet-82212-juyoo\\n[m365 dev create]: https://learn.microsoft.com/power-platform/developer/create-developer-environment\\n[pp dev]: https://learn.microsoft.com/power-apps/maker/developer-plan?WT.mc_id=dotnet-82212-juyoo?WT.mc_id=dotnet-82212-juyoo\\n[az free]: https://azure.microsoft.com/free/?WT.mc_id=dotnet-82212-juyoo\\n[gh free]: https://github.com/signup"},{"id":"2023-day9-use","metadata":{"permalink":"/Low-Code/blog/2023-day9-use","source":"@site/blog/2023-lcf/2023-02-09/part-2.md","title":"9b. Use the Custom Connector","description":"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfLowCode to learn how - https://aka.ms/lowcode-february","date":"2023-02-09T13:00:00.000Z","formattedDate":"February 9, 2023","tags":[{"label":"connectors","permalink":"/Low-Code/blog/tags/connectors"},{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":14.79,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day9-use","date":"2023-02-09T13:00","title":"9b. Use the Custom Connector","authors":["nitya","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","power platform","openAPI","connector","azure logic apps","power automate","power apps","power platform creator kit"],"image":"https://microsoft.github.io/Low-Code/img/og/30-09-02.png","description":"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfLowCode to learn how - https://aka.ms/lowcode-february","tags":["connectors","low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"10. Secure Connectors with APIM","permalink":"/Low-Code/blog/2023-day10"},"nextItem":{"title":"9a. Build a Custom Connector","permalink":"/Low-Code/blog/2023-day9-build"}},"content":"<head>\\n  <meta name=\\"twitter:url\\"\\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day9-use\\" />\\n  <meta name=\\"twitter:title\\"\\n    content=\\"9b. Use the Custom Connector\\" />\\n  <meta name=\\"twitter:description\\"\\n    content=\\"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfLowCode to learn how - https://aka.ms/lowcode-february\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-09-02.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\"\\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\"\\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day9-use\\" />\\n</head>\\n\\nWelcome to `Day 09` of #30DaysOfLowCode!\\n\\nIn the [**first part of the blog**](part-1.md), Nitya showed you how to build a custom connector for the Forem v0 API. From now, I (Daniel) will take it over and show you what you can do with the custom connector in the Power Platform. \\n\\nIf you don\'t want to follow the whole tutorial, but you **want to just see the solution**, make sure to go the the bottom of the page for a [**link to the resources**](#completed-solution) that you can import and explore on your own!\\n\\n:::info SEE US LIVE AT POWERFUL DEVS!\\nJoin us Feb 15 at the #PowerfulDevs conference where Daniel and Nitya will walk through the steps of building the connector and application - and more!\\n[**Register Here**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi)\\n:::\\n\\n\\n\\n## What We\'ll Cover\\n\\n* Custom Connectors in the Power Platform\\n* Build a front end with Power Apps\\n* Speed up development with the Creator Kit\\n* Add the Forem v0 connector to your app\\n* Add the Creator Kit components to your app\\n* Publish your app\\n* Completed solution\\n\\n![Building a Custom Connector](./../../../static/img/og/30-09-02.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Custom connectors in the Power Platform\\n\\nWhen custom connectors are deployed, you will find them in multiple places. And, because the Power Platform is not just a bunch of products together, but also really advocates the \'better together\' story, it gives you the possibility to even use data from the custom connector in places where the connector doesn\'t appear.\\n\\nLet me explain that: You can find custom connectors in Power Automate, where you can automate processes.\\n\\n![Image of the forem connector in Power Automate](Part2-1-Forem-Power-Automate.png)\\n\\nYou can also find custom connectors in Power Apps. Power Apps is the product of the Power Platform where you build apps.\\n\\n![Image of the forum connector in Power Apps](Part2-2-Forem-Power-Apps.png)\\n\\nBut, because the products work very well together, it\'s also possible to for instance:\\n\\n* Trigger a Power Automate workflow from a Power BI visual\\n* Trigger a Power Automate workflow from a Power Virtual Agents chatbot\\n* Embed a Power App inside of a Power BI report/dashboard\\n\\nWhich gives you the possibility to use the connector in places even when they don\'t have a custom connector experience out of the box.\\n\\n## Build a front end with Power Apps\\n\\nPower Apps consists of multiple types of apps: canvas apps and model-driven apps. Canvas apps are the apps that give you the possibility to design them how you want. You have the possibility to change everything on the screen. You can even build Power Apps Component Framework components if you want to build your own components with custom code.\\n\\nModel-driven apps are a different type of app. It\'s based on data. First, you start building your data model, and when you\'re done with that, you start building the forms and views in your app. Lastly, you create the app to pull it all together. It doesn\'t offer the design freedom canvas apps have, but it gives you a bunch of functionality out of the box in exchange for that. You have responsive design out of the box and you don\'t have to think much about the controls and formula\'s that canvas has, because it will do a lot of the heavy lifting for you.\\n\\nIn this blog, I will focus on building a canvas app, but I wanted to make sure everyone knew about both types of apps.\\n\\n### Create a canvas app\\n\\nIn this blog, I\'m not gonna talk about how to create a canvas app from scratch, because there is a [great Microsoft Learn article](https://learn.microsoft.com/power-apps/maker/canvas-apps/create-blank-app?WT.mc_id=power-82212-dlaskewitz) about that. For this example, I created a canvas app in tablet mode.\\n\\nWhen you have created your canvas app in tablet mode, you will see Power Apps Studio:\\n\\n![An overview of the Power Apps maker studio with a purple bar at the top, a command bar below that with actions you can perform for this app and a canvas to create your app with](./Part2-3-Power-Apps-Create.png)\\n\\nPower Apps Studio is the place where you can design, build and manage your canvas app. If you want to learn more about all that you see here, make sure to check out [this article](https://learn.microsoft.com/power-apps/maker/canvas-apps/power-apps-studio) which gives you a great explanation about what all the parts of Power Apps Studio.\\n\\n## Speed up development with the Creator Kit\\n\\nThere are tons of components available out of the box, like text inputs, date pickers, camera controls, etc. These controls offer you a lot of flexibility, but, if you want to make it yourself really easy, it\'s a good idea to use the [Creator Kit](https://learn.microsoft.com/power-platform/guidance/creator-kit/overview?WT.mc_id=power-82212-dlaskewitz). The Creator Kit is a solution which you can import into your environment. The solution contains a [set of components](https://learn.microsoft.com/power-platform/guidance/creator-kit/components?WT.mc_id=power-82212-dlaskewitz) that are based on the [Fluent UI framework](https://developer.microsoft.com/fluentui?WT.mc_id=power-82212-dlaskewitz).\\n\\nThere is excellent guidance on how to [install the Creator Kit](https://learn.microsoft.com/power-platform/guidance/creator-kit/setup?WT.mc_id=power-82212-dlaskewitz) and how to [add the code components to a canvas app](https://learn.microsoft.com/power-platform/guidance/creator-kit/creator-kit-explained?WT.mc_id=power-82212-dlaskewitz#learn-how-to-add-components-to-an-app).\\n\\nIn the app, I use the following code components:\\n\\n* Details list ([link](https://learn.microsoft.com/power-platform/guidance/creator-kit/detailslist))\\n* Pivot ([link](https://learn.microsoft.com/power-platform/guidance/creator-kit/pivot))\\n* Search box ([link](https://learn.microsoft.com/power-platform/guidance/creator-kit/searchbox))\\n\\nThe end result will look like this:\\n\\n![Dev.to Power App which shows a menu at the top, a search box and a list of dev.to articles](Part2-4-Power-App-Finished.png)\\n\\n## Add the Forem v0 connector to your app\\n\\nTo work with the forem connector, you first need to add that to your app. Go to Power Apps Studio and select the `Data` icon in the left menu. Next, add the connector to your app by selecting the `Add data` button. Search for `Forem` and click on your custom connector. If you already have a connection, feel free to select that. If not, add a connection here by adding the API key you need for the [Forem API](https://developers.forem.com/api/v1#getting-an-api-key).\\n\\nAfter connecting the custom connector to your app, the data tab should look like this:\\n\\n![](Part2-5-Connector-Added.png)\\n\\nTo test out if the connector works, we can easily create a collection (local data that\'s saved in the app) by going to the tree view (layers icon in the left menu), selecting `App` and changing the `OnStart` property to:\\n\\n```powerappsfl\\nClearCollect(\\n    Articles, \\n    Foremv0.GetArticles(\\n      { \\n        page: 1, \\n        per_page: 100\\n      }\\n    )\\n)\\n```\\n\\nThis `ClearCollect` formula will create a collection with the name _Articles_. The collection will be filled with whatever comes next. In this case, it\'s a call to the custom connector `Foremv0` and specifically, a call to the `GetArticles` action in the connector. Inside of the call, the parameters `page` and `per page` are used to make sure we get 100 items returned.\\n\\n## Add the Creator Kit components to your app\\n\\nIn the earlier chapter, I already wrote about installing and using the Creator Kit. To build this app, you should have the following code components added to your app:\\n\\n![Screenshot of code components section with Fluent command bar, details list, pivot and search box](Part2-6-Components-Added.png)\\n\\nIf you don\'t have those code components available make sure to add them like described in [the documentation](https://learn.microsoft.com/power-platform/guidance/creator-kit/creator-kit-explained?WT.mc_id=power-82212-dlaskewitz#learn-how-to-add-components-to-an-app).\\n\\nLet\'s start building the app!\\n\\nFirst, let\'s make sure our app `OnStart` property has the right content. The `OnStart` property of the app should have a couple of formulas:\\n\\n```csharp\\nSet(\\n    AppTheme,\\n    {\\n        palette: {\\n            themePrimary: \\"#000000\\",\\n            themeLighterAlt: \\"#898989\\",\\n            themeLighter: \\"#737373\\",\\n            themeLight: \\"#595959\\",\\n            themeTertiary: \\"#373737\\",\\n            themeSecondary: \\"#2f2f2f\\",\\n            themeDarkAlt: \\"#252525\\",\\n            themeDark: \\"#151515\\",\\n            themeDarker: \\"#0b0b0b\\",\\n            neutralLighterAlt: \\"#faf9f8\\",\\n            neutralLighter: \\"#f3f2f1\\",\\n            neutralLight: \\"#edebe9\\",\\n            neutralQuaternaryAlt: \\"#e1dfdd\\",\\n            neutralQuaternary: \\"#d0d0d0\\",\\n            neutralTertiaryAlt: \\"#c8c6c4\\",\\n            neutralTertiary: \\"#595959\\",\\n            neutralSecondary: \\"#373737\\",\\n            neutralPrimaryAlt: \\"#2f2f2f\\",\\n            neutralPrimary: \\"#000000\\",\\n            neutralDark: \\"#151515\\",\\n            black: \\"#0b0b0b\\",\\n            white: \\"#ffffff\\"\\n        }\\n    }\\n);\\n```\\n\\nThe above formula sets the `AppTheme` variable we are going to use in the Creator Kit components. The last part of the OnStart property should be as follows:\\n\\n```csharp\\nClearCollect(\\n    colArticles,\\n    SortByColumns(\\n        AddColumns(\\n            Foremv0.GetArticles(\\n                {\\n                    page: 1,\\n                    per_page: 1000,\\n                    tags:\\"powerplatform, powerapps, dotnet, azure\\"\\n                }\\n            ),\\n            \\"author_name\\",\\n            user.name,\\n            \\"org_name\\",\\n            organization.name,\\n            \\"formatted_date\\",\\n            Text(\\n                DateTimeValue(\\n                    Substitute(\\n                        published_at,\\n                        \\"Z\\",\\n                        \\"\\"\\n                    )\\n                ),\\n                ShortDateTime\\n            )\\n        ),\\n        \\"created_at\\",\\n        Descending\\n    )\\n)\\n```\\n\\nThe above `ClearCollect` formula creates a collection called `colArticles`. The `GetArticles` action of the custom connector will be used to grab the last 1000 articles with the tags `powerplatform, powerapps, dotnet, azure`. Wrapped around that call we have two other formulas: the `Addcolumns` formula to flatten the result of the API and add some columns, and the `SortByColumns` formula to sort the articles by created date.\\n\\nThat\'s it for our app `OnStart` formula. Next, let\'s create the header. The header consists of the following three parts:\\n\\n* Logo (image)\\n* Pivot (pivot from the Creator Kit)\\n* SearchBox (search box from the Creator Kit)\\n\\n### Logo\\n\\nFor the logo, click on the `plus` icon on the left side, which opens up the `Insert` menu. Search for _image_ in the search box. Click on `Image` that shows up in the insert menu. At the right side of your screen you can see the properties of your control. This is where you can find properties, like in this case the property `Image`, which enables you to upload an image or choose one that\'s already added to your app. Click on the dropdown next to `Image` where it shows `None` and add an image file. I added the dev.to logo here, since this app will connect to dev.to.\\n\\nDrag your image to the top-left of the screen and make sure to add a padding of `10` to the top, bottom, left & right of the image.\\n\\nThis should result in properties looking like this (changed properties in red):\\n\\n![Screenshot of the image properties](Part2-7-Image-Properties.png)\\n\\n### Pivot\\n\\nNext, add the `Fluent Pivot` component via the `Insert` menu. Set the `X` property to `100`, the `Height` property to `50` and the `Width` property to `600`. For the `Y` property, we will use a different way of changing a property. For this we have to:\\n\\n1. Press the `Y` in the properties panel of the Pivot component\\n1. Change the value of the `Y` property to `Self.Height/2` in the formula bar.\\n\\n![](Part2-8-Pivot-Properties-1.png)\\n\\nThis will place the pivot on the right side of the dev.to logo you just added. Change the `Theme` property to `AppThemeJson` so that it will get the theme you have set in the app `OnStart`.\\n\\nNow we have a pivot, but it doesn\'t do anything. To change this we need to change the following properties:\\n\\n* **Items**:\\n\\nChange this property to the following table:\\n\\n```csharp\\nTable(\\n    {\\n        ItemKey: \\"Home\\",\\n        ItemDisplayName: \\"Home\\",\\n        ItemIconName: \\"Home\\"\\n    },\\n    {\\n        ItemKey: \\"Azure\\",\\n        ItemDisplayName: \\"Azure\\",\\n        ItemIconName: \\"AzureLogo\\"\\n    },\\n    {\\n        ItemKey: \\"DotNet\\",\\n        ItemDisplayName: \\".NET\\",\\n        ItemIconName: \\"Code\\"\\n    },\\n    {\\n        ItemKey: \\"PowerPlatform\\",\\n        ItemDisplayName: \\"Power Platform\\",\\n        ItemIconName: \\"PowerApps\\"\\n    },\\n    {\\n        ItemKey: \\"MyUnpublishedArticles\\",\\n        ItemDisplayName: \\"My Unpublished Articles\\",\\n        ItemIconName: \\"Contact\\"\\n    }\\n)\\n```\\n\\nThis table contains a couple of items, which all have three properties:\\n\\n1. `ItemKey` - this is the internal key of the item, we will use it later on in the OnSelect to find out which item has been selected.\\n1. `ItemDisplayName` - this is the name that will be displayed in the pivot.\\n1. `ItemIconName` - this is the icon name that will be displayed in the pivot.\\n\\nFor more info on the workings of the pivot, go to [the documentation](https://learn.microsoft.com/power-platform/guidance/creator-kit/pivot?WT.mc_id=power-82212-dlaskewitz).\\n\\n* **SelectedKey**\\n\\nChange this property in the formula bar to the following:\\n\\n```csharp\\nSelf.Selected.ItemKey\\n```\\n\\nThis setting will make sure the pivot component will show a line below the currently selected item.\\n\\n* **OnSelect**\\n\\n```csharp\\nSwitch(\\n    Self.SelectedKey,\\n    \\"Azure\\",\\n    ClearCollect(\\n        colArticles,\\n        SortByColumns(\\n            AddColumns(\\n                Foremv0.GetArticles(\\n                    {\\n                        page: 1,\\n                        per_page: 1000,\\n                        username: \\"azure\\"\\n                    }\\n                ),\\n                \\"author_name\\",\\n                user.name,\\n                \\"org_name\\",\\n                organization.name,\\n                \\"formatted_date\\",\\n                Text(\\n                    DateTimeValue(\\n                        Substitute(\\n                            published_at,\\n                            \\"Z\\",\\n                            \\"\\"\\n                        )\\n                    ),\\n                    ShortDateTime\\n                )\\n            ),\\n            \\"created_at\\",\\n            Descending\\n        )\\n    ),\\n    \\"DotNet\\",\\n    ClearCollect(\\n        colArticles,\\n        SortByColumns(\\n            AddColumns(\\n                Foremv0.GetArticles(\\n                    {\\n                        page: 1,\\n                        per_page: 1000,\\n                        tag: \\"dotnet\\"\\n                    }\\n                ),\\n                \\"author_name\\",\\n                user.name,\\n                \\"org_name\\",\\n                organization.name,\\n                \\"formatted_date\\",\\n                Text(\\n                    DateTimeValue(\\n                        Substitute(\\n                            published_at,\\n                            \\"Z\\",\\n                            \\"\\"\\n                        )\\n                    ),\\n                    ShortDateTime\\n                )\\n            ),\\n            \\"created_at\\",\\n            Descending\\n        )\\n    ),\\n    \\"Home\\",\\n    ClearCollect(\\n        colArticles,\\n        SortByColumns(\\n            AddColumns(\\n                Foremv0.GetArticles(\\n                    {\\n                        page: 1,\\n                        per_page: 1000,\\n                        tags: \\"powerplatform, powerapps, dotnet, azure\\"\\n                    }\\n                ),\\n                \\"author_name\\",\\n                user.name,\\n                \\"org_name\\",\\n                organization.name,\\n                \\"formatted_date\\",\\n                Text(\\n                    DateTimeValue(\\n                        Substitute(\\n                            published_at,\\n                            \\"Z\\",\\n                            \\"\\"\\n                        )\\n                    ),\\n                    ShortDateTime\\n                )\\n            ),\\n            \\"created_at\\",\\n            Descending\\n        )\\n    ),\\n    \\"MyUnpublishedArticles\\",\\n    ClearCollect(\\n        colArticles,\\n        Foremv0.GetMyUnpublishedArticles()\\n    ),\\n    \\"PowerPlatform\\",\\n    ClearCollect(\\n        colArticles,\\n        SortByColumns(\\n            AddColumns(\\n                Foremv0.GetArticles(\\n                    {\\n                        page: 1,\\n                        per_page: 1000,\\n                        tag: \\"powerplatform\\"\\n                    }\\n                ),\\n                \\"author_name\\",\\n                user.name,\\n                \\"org_name\\",\\n                organization.name,\\n                \\"formatted_date\\",\\n                Text(\\n                    DateTimeValue(\\n                        Substitute(\\n                            published_at,\\n                            \\"Z\\",\\n                            \\"\\"\\n                        )\\n                    ),\\n                    ShortDateTime\\n                )\\n            ),\\n            \\"created_at\\",\\n            Descending\\n        )\\n    )\\n)\\n```\\n\\nThe above formula is very long, this is because here I use a `Switch` formula to have different behavior per selected item. In this case, you can see that when the item with the `MyUnpublishedArticles` key is selected, it\'s doing a different call (GetMyUnpublishedArticles) than when the item with the `PowerPlatform` key is selected (GetArticles, with tag parameter with the value powerplatform). The rest of the item selections are pretty much the same.\\n\\n### Search Box\\n\\nLet\'s add the `Fluent SearchBox` component via the `Insert` menu. Set the following properties:\\n\\n|Property|Value|\\n|--------------|-----------|\\n|Theme|AppThemeJson|\\n|X|700|\\n|Y|30|\\n|Width|600|\\n|Height|30|\\n\\nNow, we are done with the header. Let\'s move on with the details list, which we\'ll use to show all the articles.\\n\\n### Details List\\n\\nThe details list is where all the articles are shown. Add the `Fluent Details List`. Set the following properties:\\n\\n|Property|Value|\\n|--------------|-----------|\\n|Theme|AppThemeJson|\\n|X|0|\\n|Y|140|\\n|Width|1366|\\n|Height|628|\\n\\nNow the details list has the right dimensions and position, but it doesn\'t have the right content and settings, for that we need to change the following properties:\\n\\n* **OnChange**:\\n\\nThe following formula is documented in the documentation of the [details list](https://learn.microsoft.com/power-platform/guidance/creator-kit/detailslist#manual-sorting). This is to make sure the local collection can be sorted the way we want to sort it.\\n\\n```csharp\\nIf(Self.EventName=\\"Sort\\", \\nUpdateContext({\\n                ctxSortCol:Self.SortEventColumn,\\n                ctxSortAsc:If(Self.SortEventDirection=\'PowerCAT.FluentDetailsList.SortEventDirection\'.Ascending,true,false)\\n })\\n);\\n```\\n\\n* **Items**:\\n\\nIn the `Items` property, use an `if` condition to make sure our search box works. In this case, the `if` condition checks if the length of the SearchText in the search box is greater than or equal than 3. If that\'s the case, a `Search()` formula will be kicked off, that will search within the `colArticles` collection for the title, tags and the author name. If a match is found, it will show it in the details list. If not, the details list will become empty.\\n\\nIf the condition is not met, it will show just the `colArticles`. In both cases it will perform sorting as well.\\n\\n```csharp\\nIf(\\n    Len(SearchBox1.SearchText) >= 3,\\n    SortByColumns(\\n        Search(\\n            colArticles,\\n            SearchBox1.SearchText,\\n            \\"title\\",\\n            \\"tags\\",\\n            \\"author_name\\"\\n        ),\\n        ctxSortCol,\\n        If(\\n            ctxSortAsc,\\n            SortOrder.Ascending,\\n            SortOrder.Descending\\n        )\\n    ),\\n    SortByColumns(\\n        colArticles,\\n        ctxSortCol,\\n        If(\\n            ctxSortAsc,\\n            SortOrder.Ascending,\\n            SortOrder.Descending\\n        )\\n    )\\n)\\n```\\n\\n* **Fields**:\\n\\n![Image of the properties that need to be added](Part2-9-Details-List-Properties-1.png)\\n\\nSelect the `edit` button next to the `Fields` property and click `Add field`. Make sure to add the following fields:\\n\\n* title\\n* author_name\\n* org_name\\n* formatted_date\\n* comments_count\\n* public_reactions_count\\n* tags\\n\\nNow we have the fields available to us, but they don\'t show yet in the details list. For that, we need to change the `Columns` property.\\n\\n* **Columns**:\\n\\nAdd the following formulas to the `Columns` property:\\n\\n```c#\\nSwitch(\\n    Pivot1.Selected.ItemKey,\\n    \\"MyUnpublishedArticles\\",\\n    Table(\\n        {\\n            ColDisplayName: \\"\ud83d\udcf0 Title\\",\\n            ColName: \\"title\\",\\n            ColBold: true,\\n            ColWidth: Parent.Width-100,\\n            ColRowHeader: true,\\n            ColResizable: true\\n        }\\n    ),\\n    Table(\\n        {\\n            ColDisplayName: \\"\ud83d\udcf0 Title\\",\\n            ColName: \\"title\\",\\n            ColBold: true,\\n            ColWidth: 700,\\n            ColRowHeader: true,\\n            ColResizable: true\\n        },\\n        {\\n            ColDisplayName: \\"\u270d\ufe0f Author\\",\\n            ColName: \\"author_name\\",\\n            ColResizable: true,\\n            ColWidth: 200,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\ud83c\udfe2 Org\\",\\n            ColName: \\"org_name\\",\\n            ColResizable: true,\\n            ColWidth: 100,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\u23f0 Published\\",\\n            ColName: \\"formatted_date\\",\\n            ColResizable: true,\\n            ColWidth: 150,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\ud83d\udcac\\",\\n            ColName: \\"comments_count\\",\\n            ColResizable: true,\\n            ColSortable: true,\\n            ColWidth: 50,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\u2764\ufe0f\\",\\n            ColName: \\"public_reactions_count\\",\\n            ColResizable: true,\\n            ColSortable: true,\\n            ColWidth: 50,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\ud83c\udff7\ufe0f\\",\\n            ColName: \\"tags\\",\\n            ColWidth: 250,\\n            ColFirstMultiValueBold: true,\\n            ColMultiValueDelimiter: \\" \\"\\n        }\\n    )\\n)\\n```\\n\\nThe above formulas ensure that when the \\"MyUnpublishedArticles\\" item is selected in the pivot, it only shows the title column. If that item is not selected, it will show a lot more columns. All the columns are added to a table in both cases, and have properties like:\\n\\n* ColDisplayName: the display name of the column\\n* ColName: the name of the field\\n* ColBold: if the column needs to be bold or not\\n* ColWidth: the width of the column\\n\\nIf you want to know all possible properties, make sure to check out the [docs](https://learn.microsoft.com/power-platform/guidance/creator-kit/detailslist#columns-properties?WT.mc_id=power-82212-dlaskewitz).\\n\\n## Publish your app\\n\\nWith that, our app is ready for publishing. Select the save icon on the top right corner of the screen or use the `ctrl + S` or `cmd + S` shortcut to save your app. Publish your app by selecting the icon in the top right corner of the screen or use the `ctrl + shift + P` or `cmd + shift + P` shortcut to save your app.\\n\\nThere\'s also a share icon in the same row as the save and publish icons. You can use that to share the app with your colleagues:\\n\\n![Share app experience where you can share the app with a colleague, add an email message and an image](Part2-10-Share.png)\\n\\n## Completed solution\\n\\nThe custom connector and the canvas app are available as a solution via [this link](../../../../resources/custom-connector-solution/Forem_1_0_0_0.zip). You can import the solution via the import solution functionality that is described [here](https://learn.microsoft.com/power-apps/maker/data-platform/import-update-export-solutions).\\n\\nAnd that also concludes this blog, hopefully this helps you when you start developing with Power Apps. Don\'t forget to check out the resources below!\\n\\n## Resources\\n\\n* [**Create a canvas app from scratch**](https://learn.microsoft.com/power-apps/maker/canvas-apps/create-blank-app?WT.mc_id=power-82212-dlaskewitz)\\n* [**Creator Kit**](https://learn.microsoft.com/power-platform/guidance/creator-kit/overview?WT.mc_id=power-82212-dlaskewitz)\\n* [**Creator Kit components**](https://learn.microsoft.com/power-platform/guidance/creator-kit/components/?WT.mc_id=power-82212-dlaskewitz)\\n* [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=power-82212-dlaskewitz): Enable millions of low code devs by building custom connectors\\n* [**Learn Collection**](https://aka.ms/lowcode-february/collection) LowCode February\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day9-build","metadata":{"permalink":"/Low-Code/blog/2023-day9-build","source":"@site/blog/2023-lcf/2023-02-09/part-1.md","title":"9a. Build a Custom Connector","description":"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfLowCode to learn how - https://aka.ms/lowcode-february","date":"2023-02-09T12:00:00.000Z","formattedDate":"February 9, 2023","tags":[{"label":"connectors","permalink":"/Low-Code/blog/tags/connectors"},{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":10.335,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day9-build","date":"2023-02-09T12:00","title":"9a. Build a Custom Connector","authors":["nitya","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","power platform","openAPI","connector","azure logic apps","power automate","power apps","power platform creator kit"],"image":"https://microsoft.github.io/Low-Code/img/og/30-09-01.png","description":"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfLowCode to learn how - https://aka.ms/lowcode-february","tags":["connectors","low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"9b. Use the Custom Connector","permalink":"/Low-Code/blog/2023-day9-use"},"nextItem":{"title":"8. Serverless Low Code","permalink":"/Low-Code/blog/2023-day8"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day9-build\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"9a. Build a Custom Connector\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfLowCode to learn how - https://aka.ms/lowcode-february\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-09-01.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day9-build\\" />\\n</head>\\n\\nWelcome to `Day 09` of #30DaysOfLowCode!\\n\\nIt\'s **Integrations Week**! So far, we\'ve talked about Power Platform Connectors - from [built-in options](/blog/2023-day6) to [serverless computing solutions](/blog/2023-day8) with automated workflows triggered by connectors. But what if prebuilt connectors don\'t support _your_ requirements? That\'s where **custom connectors** come in. Join us today for a 2-part tutorial as we take you step-by-step through the process of _building, testing, and using_ a custom connector! \\n\\n:::info SEE US LIVE AT POWERFUL DEVS!\\nJoin us Feb 15 at the #PowerfulDevs conference where Daniel and Nitya will walk through the steps of building the connector and application - and more!\\n[**Register Here**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi)\\n:::\\n\\n\\n## What We\'ll Cover\\n * **Motivation** - Why are custom connectors needed?\\n * **Scenario** - Let\'s build a dev.to Connector!\\n * **Process** - Building from an OpenAPI specification\\n * **Testing** - Validate it works!\\n * **Exercise**: [Training: Build custom connectors for Power Automate](https://learn.microsoft.com/training/paths/build-custom-connectors/?WT.mc_id=javascript-82212-ninarasi&ns-enrollment-type=Collection&ns-enrollment-id=xz6ehr2mx031y0)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/lowcode-february/collection)\\n\\n![Building a Custom Connector](./../../../static/img/og/30-09-01.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Why Custom Connectors?\\n\\nFrom [the earlier post](/blog/2023-day6) we know Connectors are wrappers around APIs that make it easier for low-code developers to take actions and trigger workflows based on API-supported operations. And we know there are [900+ pre-built connectors](https://learn.microsoft.com/connectors/connector-reference/?WT.mc_id=javascript-82212-ninarasi)  for Power Platform.\\n\\n_So why would I want to build a custom connector?_ We can think of three reasons:\\n 1. **The API exists, but connector does not** - and you need to work with the API!\\n 2. **The connector exists, but it\'s not perfect** - you need a more customized or complete version.\\n 3. **The API is being built by you** - and you want to build a connector in parallel, to drive usage.\\n\\nAs a JavaScript Cloud Advocate, this was exactly the situation I faced when I wanted to explore the low-code ecosystem from a pro-developer perspective. I had a specific scenario I wanted to implement and the API existed **but the connector did not**! \\n\\nSo I reached out to my colleague Daniel (Power Platform Cloud Advocate) and his response was immediate: _Let\'s build a custom connector!!_. Alright then!\\n\\n## Our Target Scenario\\n\\nYou might know that there is an [Azure publication on dev.to](https://dev.to/azure), a community-driven content portal where cloud advocates publish tutorials, tips and best practices for developers. We have 100+ contributors on that publication, and each post can have up to 4 tags. We wanted to view the content in different ways, but the default dev.to dashboard only shows us a chronological view. So here\'s our scenario:\\n\\n:::info USER SCENARIO\\nAs a user, I want to see a list of articles from dev.to\\n - for the Azure organization\\n - for a specific user\\n - for a specific tag\\n\\nwhere each item should provide {publication date, author, tags, description, link}.\\n:::\\n\\nThe good news? The dev.to site is built on a platform called Forem - [which has an API](https://developers.forem.com/) that provides _exactly_ the kinds of operations (e.g., `/articles`) that can help us build this dashboard scenario. But there is no _prebuilt connector_ for this API, so it was time to build one!\\n\\n\\n## The Build Lifecycle\\n\\nThe Power Platform [documentation](https://learn.microsoft.com/connectors/custom-connectors/#lifecycle?WT.mc_id=javascript-82212-ninarasi) describes this 5-step process for building a custom connector:\\n\\n![](https://learn.microsoft.com/connectors/custom-connectors/media/index/authoring-steps.png)\\n\\n 1. **Build & Secure it** - applicable only if you are building the API itself. We are not, so we can skip it.\\n 2. **Define it** - this is where you describe the methods and metadata in the API. You can hand-craft this _or_ use standardized options (OpenAPI file or Postman collection) to build from.\\n 3. **Use it** - create a connection to your Connector from a client, and validate it works!\\n 4. **Share it** - make the connector available to people within your organization to use.\\n 5. **Certify it** - submit it for Microsoft certification if you want this available to all users.\\n\\n\\n## Let\'s Build the Connector!\\n\\nWe\'ll follow the guidelines in [this tutorial](https://learn.microsoft.com/connectors/custom-connectors/#tutorial?WT.mc_id=javascript-82212-ninarasi). \\n\\n### 1. Pre-Requisites\\n\\nTo get started, you will need the following:\\n * **Subscription** - to Azure (if using Azure Logic Apps), Power Automate, or Power Apps.\\n * **Familiarity** - with core concepts of Logic Apps, Power Automate flows, or Power Apps.\\n * **API Key** - to the Forem API, if using authenticated endpoints\\n\\nNote that currently Power Plaform supports only [OpenAPI v2.0](https://learn.microsoft.com/connectors/custom-connectors/define-openapi-definition#prerequisites?WT.mc_id=javascript-82212-ninarasi) - and the dev.to API uses OpenAPI 3.x.  We can work around this in two ways:\\n 1. Use a converter that downgrades API to v2.0 (knowing you may lose some functionality)\\n 2. Manually re-create API in Custom Connector wizard (using OpenAPI spec as reference)\\n\\nWe\'ll talk briefly about the first option in this post, and encourage you to join us for our [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) where Daniel will walk through the steps for the second option!\\n\\n### 2. Get The DevPlan\\n\\nDon\'t have a Power Apps or Power Automate subscription (see pre-requisites)? Just sign up for the [Power Apps Developer Plan](https://aka.ms/lowcode-february/devplan) and get a free development environment that will work for this purpose. Anyone with a work or school email address (backed by Azure AD) can sign up. Read our earlier post on [**DevTools and Onboarding**](/blog/2023-day3) options to get yourself set up with a sandbox subscription and test tenant.\\n\\n### 3. Connector Wizard\\n\\nVisit the [Power Apps](https://make.powerapps.com/) portal and sign in. You should see something like this:\\n\\n![](./build/1-signin.png)\\n\\nSelect `Data > Custom Connectors` to enter the Custom Connector Wizard. Click the `New custom connector` drop-down to see the different starting options as shown below. Use the **Create from blank** option to build the custom connector manually. We walk through this approach in our [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) on Feb 15 so don\'t miss it!\\n\\n![Screenshot of new connector options](./build/2-options.png)\\n\\n\\n### 4. OpenAPI Converter\\n\\nFor completeness, let\'s also see what happens if we were to try using the _Import an OpenAPI file_ option. First **[download the dev.to OpenAPI file](https://developers.forem.com/api/v1)** to your local drive. Then use the _Import_ option in the wizard to upload this file to the portal. (Note: in my case I used a converter tool to convert the OpenAPI YAML to a JSON file before this step).\\n\\n![Screenshot of OpenAPI error](./build/3-openapi.png)\\n\\nNot surprisingly, we get this error message indicating that the dev.to OpenAPI file uses the v3 specification which is not _yet_ supported. What do we do now?\\n\\nIf you\'re a JavaScript developer, you\'ll likely check npm for a handy converter. And guess what? [**You\'d find one!**](https://www.npmjs.com/package/api-spec-converter) that does exactly what you need. You can even use this directly on the YAML file downloaded from the dev.to API site!\\n\\n![Screenshot of converter README page](./build/4-converter.png)\\n\\nNow use the _Import_ option again but with the converted file and - SUCCESS! \ud83c\udf89 You should be taken into the first step of the Custom Connector creation workflow.\\n\\n### 5. Creation Workflow\\n\\nThe wizard walks you through the 5 key steps of the workflow (see tabs):\\n 1. **General** - defines the metadata for the Connector. Pay attention to the `Host` and `Base URL` fields. These will need to be corrected to align with the API definition. However, importing the file should have filled in details like the `Description`. Customize this by adding your own icon and background color preferences. _Then move to next tab_.\\n 2. **Security** - is the panel where you enter credentials (e.g., API key) required to access the API\\n 3. **Definition** - is the main tab defining the API. We\'ll look at this in the next section.\\n 4. **Code** - The connector can act as a proxy between API and low-code clients. This section allows you to define code that _transforms_ requests or responses in custom ways.\\n 5. **Test** - This pane helps validate your definition with simple in-wizard tests as we see later.\\n\\nFor our current purpose, let\'s dive into the _Definition_ tab for more detail.\\n\\n![Screenshot of Custom Connector Wizard](./build/5-wizard.png)\\n\\n### 6. Edit Definition\\n\\nThe good news is that importing an OpenAPI file will fill in most of the definition details for you. Here, **Actions** are the requests you can make on API (endpoints) - we can see that the default dev.to API endpoints are already defined. Because we downgraded to OpenAPI v2, you may find certain actions throwing _error_ flags.\\n\\n![Screenshot of Definition tab](./build/6-definition.png)\\n\\nYou can use your judgement to delete or edit them manually, till the complete definition is error-free. As a pro-developer, I was particularly happy to see the option to switch to a _Swagger editor_ as shown below. Changes in this editor are kept in sync with the definition, so you can easily move between the wizard UI or this editor, without losing context. The editor view lets you see the raw details of the OpenAPI spec, and the _swagger-ui_ rendered version (at right) for easy debugging.\\n\\n![Screenshot of Swagger Editor](./build/6-swagger.png)\\n\\nOnce you\'ve completed the definition to your satisfaction, take a minute to click _Update connector_ to make sure the changes are saved to the environment. We aren\'t doing any code transformations, so let\'s skip that step and go directly to testing!\\n\\n## Let\'s Test the Connector!\\n\\nAt this point, we\'ve come to the [Step 5: Test the connector](https://learn.microsoft.com/connectors/custom-connectors/define-blank#step-5-test-the-connector?WT.mc_id=javascript-82212-ninarasi) step of the tutorial. **Testing is currently available only in Power Automate and Power Apps**.\\n\\n### 1. Create Connection\\n\\nThe connector is just the wrapper around the API. Before we can use it, we need to associate this with a _Connection_ that provides the required **credentials** (e.g., API key) required to actually use the deployed API endpoint.\\n\\nYou can create a new connection either from the _Connections_ page (see sidebar) or from the Test tab of the wizard itself. Once the Connection is created, you should be taken to the Connections page to verify that it was created correctly. Now we\'re ready to test!\\n\\n![Screenshot of Connections UI](./build/7-connection.png)\\n\\n### 2. Test Connector\\n\\nSwitch back to the Custom Connectors page, select the connector you were working on, and move to the _Test_ tab. You should see something like this - where you can now select the newly created connector as the default Connection for the test.\\n\\n![Screenshot of Testing UI](./build/7-test.png)\\n\\nAt this point, you can simply select the _Action_ (request), provide any necessary parameters, and click `Test operation` to see if you get the correct response. For example, in the screenshot below, you can see the default response for `getUserArticles` returns the last article I published on dev.to! \\n\\n![Screenshot of Test Run response](./build/7-response.png)\\n\\nThis test tab also provides helpful feedback - for instance _schema validation_ - that can help you further debug and fix any issues in the definition, before you share the connector with others.\\n\\n![Screenshot of Schema Validation output](./build/7-schema.png)\\n\\n:::success CONGRATULATIONS \ud83e\udd73\\nYou just built and tested your first custom connector using the dev.to API!\\n:::\\n\\nNote that testing within the wizard helps with improving the _definition_ but it can be laborious to test everything that your intended application will use. Instead, you might be able to test the connector _from an application_ by **using the connector in a Power Apps or Power Automate** implementation.\\n\\n## Next: Use The Connector!\\n\\nWow - we covered a lot today! Here\'s a helpful visual recap for your convenience. We defined our scenario, built our connector, tested it within the Custom Connector wizard, and learned about options for sharing it widely. What\'s next? **Using the connector** in a real-world context, to deliver the rich interactive experience we described in our scenario. **Read Part-2 to see how we used the connector within Power Apps!**.\\n\\n![Building a custom connector](./build/Build-Custom-Connector.png)\\n\\n## Exercise\\n\\nTry building a custom connector yourself, either for the same dev.to API, or for any other OpenAPI-compliant API that you might want to use. And don\'t forget to [**join us Feb 15 for the PowerfulDevs Conference**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) where we walk through the process and demo in under 30 mins!\\n\\n## Resources\\n\\n - [**Training: Build custom connectors for Power Automate**](https://learn.microsoft.com/training/paths/build-custom-connectors/?WT.mc_id=javascript-82212-ninarasi&ns-enrollment-type=Collection&ns-enrollment-id=xz6ehr2mx031y0) - also in our [Cloud Skills Challenge](https://aka.ms/lowcode-february/challenge)\\n - [**Documentation: Custom Connectors**](https://learn.microsoft.com/connectors/custom-connectors/?WT.mc_id=javascript-82212-ninarasi) - on Microsoft Learn\\n - [**Examples: Custom Connectors**](https://github.com/Microsoft/PowerPlatformConnectors/tree/master/custom-connectors) - GitHub Repository\\n - [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi): Enable millions of low code devs by building custom connectors\\n - [**Learn Collection** ](https://aka.ms/lowcode-february/collection) LowCode February\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day8","metadata":{"permalink":"/Low-Code/blog/2023-day8","source":"@site/blog/2023-lcf/2023-02-08/01 - LogicApps.md","title":"8. Serverless Low Code","description":"Let\'s explore the topic of serverless low code and piecing together a workflow with Azure Logic Apps.","date":"2023-02-08T00:00:00.000Z","formattedDate":"February 8, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"},{"label":"logic-apps","permalink":"/Low-Code/blog/tags/logic-apps"},{"label":"azure-logic-apps","permalink":"/Low-Code/blog/tags/azure-logic-apps"},{"label":"azure-functions","permalink":"/Low-Code/blog/tags/azure-functions"},{"label":"power-automate","permalink":"/Low-Code/blog/tags/power-automate"}],"readingTime":8.49,"hasTruncateMarker":false,"authors":[{"name":"Matt Soucoup","title":".NET Advocacy Lead","url":"https://github.com/codemillmatt","imageURL":"https://github.com/codemillmatt.png","key":"matt"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day8","title":"8. Serverless Low Code","authors":["matt","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform","connectors","custom connectors","azure logic apps"],"image":"https://microsoft.github.io/Low-Code/img/og/30-08.png","description":"Let\'s explore the topic of serverless low code and piecing together a workflow with Azure Logic Apps.","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","logic-apps","azure-logic-apps","azure-functions","power-automate"]},"prevItem":{"title":"9a. Build a Custom Connector","permalink":"/Low-Code/blog/2023-day9-build"},"nextItem":{"title":"7. Dataverse - Do more with Data, for less!","permalink":"/Low-Code/blog/2023-day7"}},"content":"<head>\\n  <meta name=\\"twitter:url\\"\\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day8\\" />\\n  <meta name=\\"twitter:title\\"\\n    content=\\"8. Serverless Low Code\\" />\\n  <meta name=\\"twitter:description\\"\\n    content=\\"Let\'s explore the topic of serverless low code and piecing together a workflow with Azure Logic Apps.\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-08.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\"\\n    content=\\"@codemillmatt\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\"\\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day8\\" />\\n</head>\\n\\nWelcome to `Day 8` of #30DaysOfLowCode!\\n\\nThe theme for this week is Integrations. Yesterday we talked about Low Code + Dataverse. Today we\'ll explore the topic of serverless low code and piecing together a workflow with Azure Logic Apps.\\n\\n## What We\'ll Cover\\n\\n* Serverless and Low Code?\\n* Azure Logic Apps overview\\n* Let\'s build a Logic App\\n* Logic Apps compared to Power Automate\\n* Resources\\n\\n![Low Code and Serverless](./../../../static/img/og/30-08.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Serverless and Low Code?\\n\\nAre you sitting down? Because I\'m about to tell you that there\'s something out there that combines the best of serverless computing with low code development. And that\'s ... Azure Logic Apps.\\n\\nServerless computing lets you worry less about the underlying infrastructure your code is running on and concentrate more on the code itself.\\n\\nA benefit of serverless computing is that you don\'t write huge applications, instead you write small functions that do one specific task. For example, respond to an HTTP request. Or process a message from a queue.\\n\\nThen within that function, you write code that deals with the task. Any logic, or connections to other services - that\'s pretty much on you to write code for.\\n\\nAzure Logic Apps brings the Low Code world to serverless computing. You still solve a problem in a concise of a manner as possible with a Logic App - and the Logic App is started by some sort of event. But instead of writing code, you use a visual designer to piece together a workflow.\\n\\n## Azure Logic Apps overview\\n\\nAt its heart, Azure Logic Apps automates the execution of business processes by using a visual designer to create workflows.\\n\\nBut what sets Logic Apps apart, are its pre-made components.\\n\\nWhen you\'re creating a Logic App, you arrange pre-made components into a sequence - or a workflow. These components are designed to communicate with external services. So you can specify - all in a visual designer - what event should trigger a workflow to start and then what actions should occur.\\n\\n![A diagram showing the step you\'ll take when building a logic app.](./1-app-design-process.png)\\n\\nAs I mentioned, there are literally hundreds of external services (or components) you can connect your Logic App to. And the beauty of it is, the Logic Apps runtime takes care of managing the connections to the services. You don\'t have to worry about writing code to establish connections or check connectivity - Logic Apps has your back.\\n\\n![A graphic showing various 3rd party services a logic app can connect to.](./2-external-services.png)\\n\\nBuilding a Logic App is the process of building a workflow using the components to solve your business problem. Each component will have different triggers that will start a workflow, and different actions that it can take when a workflow is running. How you use them is up to you.\\n\\n![A diagram showing an example Logic App workflow that detects the sentiment of a tweet.](./3-service-use.png)\\n\\n## Building a Logic App\\n\\nWe\'re not going to create a Logic App from front to back, step-by-step, in this article. That\'s really worth it\'s own article and we have some [documentation](https://learn.microsoft.com/azure/logic-apps/quickstart-create-first-logic-app-workflow?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou) that will take you through that process.\\n\\nRather I want to concentrate on the major pieces and decision points that you\'ll make when creating a Logic App.\\n\\n### Connecting to other services\\n\\nNow let\'s pause for a second to talk about all of these services that you can connect your Logic Apps workflow to. A _connector_ is a component that provides an interface to an external service. For example, the Twitter connector allows you to send and retrieve tweets, while the Office 365 Outlook connector lets you manage your email, calendar, and contacts.\\n\\nThere are literally hundreds of connectors from Microsoft and 3rd party vendors that you can use to build your workflows with.\\n\\nA connector uses the external service\'s REST API to do its work. When you use the connector in your Logic App workflow, the connector calls the service\'s underlying API for you.\\n\\n![A diagram of how a connector works](./6-connector.png)\\n\\nIf you can\'t find a connector that suits your needs? You can build one yourself! It\'s called a custom connector, and this [series](https://learn.microsoft.com/connectors/custom-connectors/?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou) of [articles](https://learn.microsoft.com/connectors/custom-connectors/create-logic-apps-connector?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou) will show you how to make your REST API into a connector!\\n\\n### Kicking off the logic\\n\\nThe very first decision you\'ll need to make when creating a Logic App is to decide what type of event, or _trigger_ will start the workflow running. The trigger specifies the condition to meet before any actions defined in the Logic App execute. Each time the trigger fires, the Logic Apps runtime creates and runs the workflow instance.\\n\\nThere are a ton of different triggers you can choose from. A workflow can be started with events as varied as a new email arriving to a new message arriving in an Azure Storage queue.\\n\\n![A screenshot showing the 2 different triggers for an Azure Storage Queue](./5-queue-triggers.png)\\n\\n### Performing actions\\n\\nIf a trigger kicks off a workflow, then an action performs a specific task while the workflow is running.\\n\\nA connector can be composed of many actions and triggers. For example, the Dropbox connector has triggers to monitor for when a file is created or modified. And it has actions to create a file, list files in a folder, and so on.\\n\\n![Diagram showing the Dropbox connector triggers and actions](./7-dropbox-connector-details.png)\\n\\nYou string together actions, after the triggering event, to perform the business logic of your Logic App. But what if your logic had branches or conditions in it?\\n\\n### Controlling actions\\n\\nA control action routes the execution within a workflow based on conditions.\\n\\nConsider the Azure DevOps connector\'s Build Complete trigger kicking off a workflow. If the build status is _failed_, then a text message could be sent using the Azure Communication Service\'s connector. Otherwise if the build status is successful, a message could be posted to a chat in Microsoft Teams using its connector.\\n\\nThe _if_ statement is a conditional action. There are others controlling actions such as _switch_ statements, _for each_ and _until_ loops.\\n\\n## Logic Apps compared to Power Automate\\n\\nNow, you may be thinking to yourself - Logic Apps sound a lot like Power Automate. And you\'re not wrong, they\'re both workflow-based services that work with connectors to other services.\\n\\nIn fact, Power Automate is built upon Azure Logic Apps!\\n\\n### UI\\n\\nThey both have a user-friendly design surface to create your workflow on quickly. The difference is that Logic Apps allows you to build a bit more complex integration solutions and utilize advanced development tooling like Visual Studio or VS Code. Logic Apps has a recently refreshed designer, whereas Power Automate still uses the previous designer and is only accessible via the Power Automate portal.\\n\\n### Connectors\\n\\nOn the connectors level, there are some differences. To make it a bit more clear for you, I have split the connectors section up in two parts:\\n\\n#### Logic Apps only connectors\\n\\nLogic Apps has the following connectors that are only available for Logic Apps:\\n\\n* Azure Functions\\n* IBM 3270/MQ Series\\n* SAP\\n* Data Transformation\\n* Inline Code\\n\\nLogic Apps offers a bunch of rich integrations with enterprise systems like IBM 3270 & MQ. Logic Apps also has a fairly advanced SAP connector which supports RFC, BAPI & IDOC actions. It also receives messages from SAP, which the SAP ERP connector from Power Automate can\'t. Next to the enterprise system connectors, it also offers extra features like Azure Functions integration, Data Transformation & Inline Code.\\n\\n#### Power Automate only connectors\\n\\nPower Automate also has connectors that are only available for Power Automate:\\n\\n* AI Builder\\n* Approvals\\n* Desktop flows\\n* Power Apps\\n* Power Virtual Agents\\n* SAP ERP\\n\\nPower Automate offers rich integration with Power Platform products like AI Builder, Approvals, Desktop flows (Robotic Process Automation aka RPA), Power Apps & Power Virtual Agents. It also has a SAP ERP connector which supports RFCs and BAPIs. It also has  [nice templates](https://powerautomate.microsoft.com/blog/announcing-deeper-sap-integration-for-the-power-platform/?WT.mc_id=dotnet-82212-masoucou) available that they have built since the [Clear Software acquisition](https://cloudblogs.microsoft.com/powerplatform/2021/10/22/microsoft-acquires-clear-software-to-enhance-connectivity-to-systems-of-record/?WT.mc_id=dotnet-82212-masoucou).\\n\\n### Licensing\\n\\nThe licensing model is also different, I\'ve listed the characteristics below:\\n\\n#### Power Automate\\n\\nPower Automate is licensed on a per-user, per-flow or Pay-as-you-Go basis.\\n\\n* The per user model is the all you can eat model for Power Automate. You can create & use as much flows as you want, as long as your Dataverse storage is big enough & you haven\'t reached your [service limits](https://learn.microsoft.com/power-platform/admin/api-request-limits-allocations#licensed-user-request-limits?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou). It has a version with and without attended Robotic Process Automation (RPA).\\n* The per flow model is a model that gives you the possibility to let an unlimited number of people within your organization run a flow.\\n* The pay-as-you-go model has been introduced not too long ago, and this is where you pay per flow run.\\n\\n#### Logic Apps Consumption & Logic Apps Standard\\n\\nThere are two types of Logic Apps:\\n\\n* Logic Apps Consumption\\n* Logic Apps Standard\\n\\nLogic Apps Consumption is the type of Logic App that has been around for a while and it\'s the type of Logic App that Power Automate is based on. You pay per execution. And on top of that, you can pay a fixed fee for an Integration Services Environment. A Logic App can contain only one workflow.\\n\\nLogic Apps Standard is a different type of Logic App. You pay a static monthly charge instead of per execution. With Logic Apps Standard, you can have multiple stateful and stateless workflows. You can also host Logic Apps Standard yourself, for instance in a Docker container.\\n\\n### Built-In VNET\\n\\nLogic Apps also has built-in Virtual Network (VNET) configuration included. This is something that Power Automate doesn\'t offer.\\n\\n## Resources\\n\\n* Take a [self-paced training course](https://learn.microsoft.com/training/modules/intro-to-logic-apps/?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou) on Azure Logic Apps!\\n* [Azure Logic Apps documentation](https://learn.microsoft.com/azure/logic-apps/?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou)\\n* [Power Automate documentation](https://learn.microsoft.com/power-automate/getting-started?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou)"},{"id":"2023-day7","metadata":{"permalink":"/Low-Code/blog/2023-day7","source":"@site/blog/2023-lcf/2023-02-07/index.md","title":"7. Dataverse - Do more with Data, for less!","description":"Learn how to do more with your data for less using Microsoft Dataverse!","date":"2023-02-07T00:00:00.000Z","formattedDate":"February 7, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":6.97,"hasTruncateMarker":false,"authors":[{"name":"Srikumar Nair","title":"Principal Group Program Manager","url":"https://github.com/MicroSri","imageURL":"https://github.com/MicroSri.png","key":"srikumar"}],"frontMatter":{"slug":"2023-day7","title":"7. Dataverse - Do more with Data, for less!","authors":["srikumar"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform","connectors","custom connectors"],"image":"https://microsoft.github.io/Low-Code/img/og/30-07.png","description":"Learn how to do more with your data for less using Microsoft Dataverse!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"8. Serverless Low Code","permalink":"/Low-Code/blog/2023-day8"},"nextItem":{"title":"6. Let\'s Make Some Connections!","permalink":"/Low-Code/blog/2023-day6"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day7\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"7. Manage your data with Dataverse!\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Learn how to do more with your data for less using Microsoft Dataverse!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-07.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day7\\" />\\n</head>\\n\\n\\n\\nWelcome to `Day 07` of #30DaysOfLowCode!\\n\\n## What We\'ll Cover\\n * What is Dataverse?\\n * Under The Hood: Features\\n * Built-in Integrations: Azure\\n * Enterprise-ready: Hyperscale\\n * Resource: Explore the [Low Code February Collection](https://aka.ms/lowcode-february/collection)\\n\\n\\n![Low Code and Dataverse](./../../../static/img/og/30-07.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\nMicrosoft Dataverse is a SaaS data platform that helps you ***easily create and manage your data, events, logic, and generate analytics, and insights to support interconnected apps and processes in a secure and compliant manner***. Dataverse, being a hyperscale polyglot storage, can store any type of data (relational, file, observational etc.) for all your transactional or analytical applications. Dataverse is the data platform for all Power Platform products and Dynamics 365 applications, supporting both low-code and pro-code development. It is a critical element of Microsoft Power Platform, supporting all the data, events, analytics, and related processing, besides generating insights for citizen app makers and professional developers to build, store and manage data for their applications. \\n\\n![Figure 1: Microsoft Dataverse and Power Platform](./DataverseRunsOnAzure.png)\\n*Figure 1: Microsoft Dataverse and Power Platform*\\n\\nAll these diverse types of data, in Dataverse, are represented externally as tables, which not only makes it easy for citizen developers to use it as excel but also accelerates design and development time and cost, for professional developers .Dataverse includes a base set of standard tables that cover typical scenarios, also known as [Common Data Model (CDM)](https://learn.microsoft.com/common-data-model/?WT.mc_id=javascript-82212-ninarasi), but you can also customize or create new custom tables specific to your needs.\\n\\n## Dataverse -Under the hood \\nDataverse enables integrated, intelligent systems of action of the data that is stored. Dataverse achieves this by leveraging Azure services, so it is built on Azure and extends with Azure. \\n\\n ![Figure 2: Microsoft Dataverse and Power Platform](./DataverseRunsOnAzure.png)\\n\\n*Figure 2: Microsoft Dataverse Runs on Azure & Extends with Azure*\\n\\nAll the building blocks of Dataverse i.e., storage, compute and insights are built on Azure. Similarly, if you need to extend the functionality, you can leverage your existing investments in Azure to augment your customer requirements. \\n\\n## Why Dataverse? ##\\nMicrosoft Dataverse is much more than a database because it provides a managed SaaS data platform experience for citizen developers and professional developers to build, store, and manage data for their applications. It also provides a rich and intelligent computing layer to integrate and act on these diverse types of data through [a rich API layer](https://learn.microsoft.com/power-apps/developer/data-platform/webapi/overview/?WT.mc_id=javascript-82212-ninarasi), besides providing analytics and generating insights. \\n\\nLet\u2019s look at some of these salient features of Dataverse. \\n\\n### Enables low-code and pro-code integration of external data\\n\\nDataverse provides an ability to use out of the box power of Power Query via [Power Platform Data Flows](https://learn.microsoft.com/power-query/dataflows/create-use/?WT.mc_id=javascript-82212-ninarasi), [Azure Data Factory](https://learn.microsoft.com/azure/data-factory/connector-dynamics-crm-office-365?tabs=data-factory/?WT.mc_id=javascript-82212-ninarasi)(ADF) and [Web API](https://learn.microsoft.com/power-apps/developer/data-platform/webapi/perform-operations-web-api/?WT.mc_id=javascript-82212-ninarasi) to enable low-code and pro-code developers to integrate external data with Dataverse. With few clicks, users can have a quick start experience to get the data from multitude of data sources specifically from Azure resources into Dataverse with rich, intuitive user experience. Pro dev deeply familiar with data transformations can extend queries and author complex transformations for both ADF and Power Query. A splendid example of using Dataverse data to create reports can be found [here](https://learn.microsoft.com/power-apps/maker/data-platform/data-platform-powerbi-connector?tabs=Dataverse/?WT.mc_id=javascript-82212-ninarasi). Another powerful feature about data integration with Dataverse is the introduction of Virtual Tables in Dataverse which allows you to integrate external data without moving it physically into Dataverse. With this new experience, you can create virtual tables from SharePoint and SQL without any code, and without leaving the maker portal. In minutes, you can set up your connection, pick your SharePoint Site or SQL Database, select your SharePoint List or SQL Table, and your virtual table will appear in table hub within [Maker experience](https://make.powerapps.com) ready to use.\\n\\n  ![Figure 3: Creating a Virtual Table in Microsoft Dataverse](./VT_SQL_short_221215_small.gif)\\n*Figure 3 : Creating a Virtual Table in Microsoft Dataverse* \\n\\nYou can try it out for yourself using this detailed [information](https://powerapps.microsoft.com/blog/virtual-tables-creation-wizard-now-in-public-preview/?WT.mc_id=javascript-82212-ninarasi) \\nAdditional Info: [Virtual tables in Dataverse](https://www.youtube.com/watch?v=viRTtGEZXNE&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=2&ab_channel=MicrosoftPowerPlatform)\\n\\n### Advanced business logic, eventing, analytics, and insights at no additional cost \\nBesides Web API, Dataverse also provides several advanced business logic and eventing features like [calculated fields and rollups](https://learn.microsoft.com/power-apps/developer/data-platform/calculated-rollup-attributes/?WT.mc_id=javascript-82212-ninarasi), and automatic [duplicate detection](https://learn.microsoft.com/power-platform/admin/detect-duplicate-records/?WT.mc_id=javascript-82212-ninarasi) along with powerful built-in AI, Analytics through Power BI, Azure Cognitive Services and [AI Builder](https://learn.microsoft.com/power-apps/use-ai-builder/?WT.mc_id=javascript-82212-ninarasi). Dataverse allows pro-code extensibility via [plug-ins](https://learn.microsoft.com/power-apps/developer/data-platform/plug-ins/?WT.mc_id=javascript-82212-ninarasi) and low code extensibility using Power FX, like [formula columns](https://learn.microsoft.com/power-apps/maker/data-platform/formula-columns/?WT.mc_id=javascript-82212-ninarasi).\\n\\nAdditionally, there is built-in integration with Azure - With a few clicks, you can use [Azure Synapse Link for Dataverse](https://learn.microsoft.com/power-apps/maker/data-platform/export-to-data-lake/?WT.mc_id=javascript-82212-ninarasi) to bring your Dataverse data to Azure Synapse, visualize data in your Azure Synapse workspace, and rapidly start processing the data to discover insights using advanced analytics capabilities for serverless data lake exploration, code-free data integration, data flows for extract, transform, load (ETL) pipelines, and optimized Apache Spark for big data analytics. [Here](https://cloudblogs.microsoft.com/powerplatform/2021/05/26/accelerate-time-to-insight-with-azure-synapse-link-for-dataverse/) is how you can accelerate time to insight with Azure Synapse Link for Dataverse. \\n\\nHere is another glimpse into doing more with [analytics using Dataverse](https://www.youtube.com/watch?v=UNMYSEN3VeI&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=50&ab_channel=MicrosoftPowerPlatform)\\n\\nAll these features are built-in into Dataverse and hence you do not have to spend any additional time or money managing additional compute services outside Dataverse platform which helps in bringing down the total cost of ownership for an end-to-end business solution.\\n\\n### Providing data residency and compliance while scaling globally.\\nDataverse serves customers in 18 distinct geographic locations like Asia Pacific, Canada, Switzerland, France, Germany, UK, India, Japan, China, Korea, Norway, Australia, South America, Singapore, UAE, South Africa, North America, Europe and expanding to more regions. To help your organization comply with national, regional, and industry-specific requirements governing the collection and use of individuals\u2019 data, Dataverse provides a comprehensive set of compliance offerings which you can find [here](https://learn.microsoft.com/power-platform/admin/wp-compliance-data-privacy/?WT.mc_id=javascript-82212-ninarasi).The latest availability information can be found in [Product Availability by Geography](https://powerplatform.microsoft.com/availability-reports/georeport/?WT.mc_id=javascript-82212-ninarasi) under Power Apps product, since Dataverse is the data platform for Power Platform products.\\n\\n### Availability and Reliability that you can depend on\\nDataverse also provides high availability (99.9+ %), reliability features like disaster recovery and business continuity capabilities for your production instance, by leveraging [Azure availability zones](https://learn.microsoft.com/azure/reliability/availability-zones-overview/?WT.mc_id=javascript-82212-ninarasi) and asynchronous cross-region replications using [Azure paired regions](https://learn.microsoft.com/azure/reliability/cross-region-replication-azure/?WT.mc_id=javascript-82212-ninarasi). You can read more about these scenarios and solutions in [this article](https://learn.microsoft.com/power-platform/admin/business-continuity-disaster-recovery/?WT.mc_id=javascript-82212-ninarasi) which explains *Business Continuity(BC)* and *Disaster Recovery (DR)*. You can watch [Planet-scale Dataverse](https://www.youtube.com/watch?v=QlQmBPYAK8I&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=39&t=100s&ab_channel=MicrosoftPowerPlatform) to learn more about how Dataverse operates at planet-scale.\\n\\nWith Dataverse you can store terabytes of data \u2013 all types of data like relational, non-relational, image, file etc. and process millions of transactions in a day. You can take a look at the different types of data supported by Dataverse [here](https://learn.microsoft.com/power-apps/maker/data-platform/types-of-fields/?WT.mc_id=javascript-82212-ninarasi).You can also learn more about [Polyglot and Hyperscale Dataverse](https://www.youtube.com/watch?v=bSscrGddctI&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=35&ab_channel=MicrosoftPowerPlatform). Dataverse also delivers fast and [comprehensive search results experience](https://learn.microsoft.com/power-platform/admin/configure-relevance-search-organization#what-is-dataverse-search/?WT.mc_id=javascript-82212-ninarasi) in a single list, sorted by relevance, powered by Microsoft Azure Cognitive Search. Besides all Dataverse instances are backed up automatically every few minutes and these backups can be retained for 7 to 28 days, in case of production environments running Power Platform and Dynamics applications respectively. \\n\\n\\n### Enterprise grade Security, along with advanced risk and compliance features\\nDataverse provides built-in enterprise-grade security that is based on [Zero Trust](https://www.microsoft.com/security/business/zero-trust/?WT.mc_id=javascript-82212-ninarasi) principles. The security layer spans across data and compute layer with robust authentication mechanisms and authorization mechanisms like role-based access model. Dataverse also supports advanced risk and compliance features like [Customer Lockbox](https://learn.microsoft.com/power-platform/admin/about-lockbox/?WT.mc_id=javascript-82212-ninarasi) and [Customer Managed Key](https://learn.microsoft.com/power-platform/admin/manage-encryption-key/?WT.mc_id=javascript-82212-ninarasi). Learn more about Dataverse Security features and capabilities covered in the [Microsoft Dataverse Security white paper](https://download.microsoft.com/download/9/e/d/9edefa88-50a0-4900-97f4-815bca5a7cb8/Dataverse-security-and-scenarios.pdf).\\n\\nYou can see by using Microsoft Dataverse with Azure, there is so much you can do with your data for so less - effort, cost and time! \\n\\n### What\'s next?\\n\\nStay tuned for the rest of this week\'s blog posts to dive deeper into the world of connectors and backend integrations.  \\n\\n* 1\ufe0f\u20e3 [**Sign up**](https://aka.ms/lowcode-february/devplan) for the free Power Apps Developer Plan.\\n* 2\ufe0f\u20e3 [**Enroll**](https://aka.ms/lowcode-february/challenge) in the Cloud Skills Challenge to learn more about low code and fusion team fundamentals and start climbing that leaderboard!\\n* 3\ufe0f\u20e3 Connectors will also be highlighted at the Powerful Devs Conference so be sure to [**Sign up**](https://aka.ms/lowcode-february/PowerfulDevsConf2023) for the free virtual event!\\n\\n## Resources\\n* Resource: Explore the [Low Code February Collection](https://aka.ms/lowcode-february/collection)\\n* [Microsoft Dataverse documentation](https://learn.microsoft.com/power-apps/maker/data-platform/?WT.mc_id=javascript-82212-ninarasi)\\n* [Why to choose Dataverse](https://www.youtube.com/watch?v=fbKZlF1WMBk&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=5&ab_channel=MicrosoftPowerPlatform)"},{"id":"2023-day6","metadata":{"permalink":"/Low-Code/blog/2023-day6","source":"@site/blog/2023-lcf/2023-02-06/06_Connectors.md","title":"6. Let\'s Make Some Connections!","description":"Learn about Power Platform\'s ability to seamlessly pull in and interact with data from a variety of 1st and 3rd party services!","date":"2023-02-06T00:00:00.000Z","formattedDate":"February 6, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":4.5,"hasTruncateMarker":false,"authors":[{"name":"April Dunnam","title":"Power Platform Advocacy Lead","url":"https://github.com/AprilDunnam","imageURL":"https://github.com/AprilDunnam.png","key":"april"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day6","title":"6. Let\'s Make Some Connections!","authors":["april","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform","connectors","custom connectors"],"image":"https://microsoft.github.io/Low-Code/img/og/30-06.png","description":"Learn about Power Platform\'s ability to seamlessly pull in and interact with data from a variety of 1st and 3rd party services!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"7. Dataverse - Do more with Data, for less!","permalink":"/Low-Code/blog/2023-day7"},"nextItem":{"title":"5. Recap - Fundamentals Week \u2728","permalink":"/Low-Code/blog/2023-day5"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day6\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"6. Let\'s Make Some Connections!\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Learn about Power Platform\'s ability to seamlessly pull in and interact with data from a variety of 1st and 3rd party services!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-06.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day6\\" />\\n</head>\\n\\nWelcome to `Day #06` of #30DaysOfLowCode!\\n\\n\\nOne of the things that makes the Power Platform so powerful (pun intended) is its ability to seamlessly pull in and interact with data from a variety of 1st and 3rd party services. This integration with other services is done through Connectors - the building blocks of the Power Platform.\\n\\n## What We\'ll Cover\\n * What is a Connector?\\n * Connectors Components\\n * Custom Components\\n * Certifying a Connector\\n * **Activity**: Sign up for your [Developer Plan](https://aka.ms/lowcode-february/devplan)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/lowcode-february/collection)\\n\\n\\n![Developer Tools and Onboarding](./../../../static/img/og/30-06.png)\\n\\n\\n## What is a Connector?\\n\\n A connector is a wrapper around an API that allows the underlying service to talk to the Power Platform. It\'s essentially a proxy that provides a way for users to connect their accounts and leverage a set of prebuilt actions and trigger to integrate the services with their apps and workflows.\\n\\nThe Power Platform offers a large ecosystem of software as a service connectors that enable you to connect apps, data and devices in the cloud. Some examples of popular connectors are Office 365, Outlook, Dropbox, Salesforce, Google Services and many many more.\\n\\n![Connector Architecture](./06_ConnectorsList.png)\\n\\nThere are hundreds of prebuilt connectors available to use in Power Apps, Power Automate and Logic Apps. You can see a list of all of the connectors available here: [https://learn.microsoft.com/connectors/connector-reference/](https://learn.microsoft.com/connectors/connector-reference/)\\n\\n## Connectors Components\\n\\nEvery connector offers action and trigger operations. Let\'s explore each of those further.\\n\\n**Actions** are changes that are directed by a user. An action can be used to perform standard CRUD (create, read, update and delete) operations in a data source like a SQL database. Each of these actions directly map to operations defined in the OpenAPI definition for the connector.\\n\\n**Triggers** allow you to kick off interaction with your connector when specific events occur. For example, the SharePoint connector has a trigger for when a new file is added and the Outlook connector has a trigger for when an email is received. You can build a Logic App or flow in Power Automate that listens to this trigger and performs an action whenever the trigger fires. Triggers are unique to Power Automate and Logic Apps and can\'t be used inside of Power Apps.\\n\\nThere are two types of triggers:\\n\\n* **Polling Triggers** which call your service at specified intervals to check for new data. When that new data is available, it causes a new run of your workflow instance with the data as an input.\\n* **Push Triggers** which wait for an event to occur that then causes a new run of your workflow instance.\\n\\n## Custom Connectors\\n\\nThe amount of out-of-the-box connectors for the Power Platform is growing every day, but sometimes you might want to call API\'s, services and systems that aren\'t available as prebuilt connectors. To support this need, you can build custom connectors that have their own triggers and actions.\\n\\nA connector is simply a wrapper around an API which means you can take any RESTful API that is defined in OpenAPI (Swagger) and make that accessible to the Power Platform with a custom connector.\\n\\n![Connector Architecture](./06_ConnectorArchitecture.png)\\n\\nYou can build custom connectors to connect to both public and private API\'s.\\n\\nConnections to private API\'s are possible with the [on-premises data gateway](https://learn.microsoft.com/flow/gateway-reference).\\n\\nFor public API\'s that you want to create and manage, you might considering leveraging Azure products like [Azure Functions](https://azure.microsoft.com/services/functions/), [Azure Web Apps](https://azure.microsoft.com/services/app-service/web/) or [Azure API Apps](https://azure.microsoft.com/services/app-service/api/).\\n\\nCustom connectors can either be used internally within your organization or you can get your connector certified so that it\'s publicly accessible for anyone in the world using the Power Platform and Logic Apps.\\n\\n## Certifying a Connector\\n\\nIf you want to make your custom connector publicly available you have to go through a certification process where Microsoft reviews the connector to see if it meets certification criteria and approves it for publishing.\\n\\nThere are two options when it comes to getting a connector certified:\\n\\n* **Verified Publisher** - To be eligible to get certified as a verified publisher, you must own the underlying service behind the connector.\\n* **Independent Publisher** - This gives you a chance to get your connector certified if you do not own the underlying service behind it.\\n\\nThe processes for certification vary depending on which option you qualify for. You can learn more about the process for getting your connector certified here:\\n\\n* [Independent publisher certification process](https://learn.microsoft.com/connectors/custom-connectors/certification-submission-ip)\\n* [Verified publisher certification process](https://learn.microsoft.com/connectors/custom-connectors/certification-submission)\\n\\n## What\'s next?\\n\\nStay tuned for the rest of this week\'s blog posts to dive deeper into the world of connectors and backend integrations.  \\n\\n* 1\ufe0f\u20e3 [**Sign up**](https://aka.ms/lowcode-february/devplan) for the free Power Apps Developer Plan.\\n* 2\ufe0f\u20e3 [**Enroll**](https://aka.ms/lowcode-february/challenge) in the Cloud Skills Challenge to learn more about low code and fusion team fundamentals and start climbing that leaderboard!\\n* 3\ufe0f\u20e3 Connectors will also be highlighted at the Powerful Devs Conference so be sure to [**Sign up**](https://aka.ms/lowcode-february/PowerfulDevsConf2023) for the free virtual event!\\n\\n## Resources\\n* [Introduction to the Power Platform](https://aka.ms/LowCodePowerPlatformIntro)\\n* [Fusion Development with Power Platform EBook](https://aka.ms/FusionDevEbook)\\n* [Fusion Development with Power Platform Learning Path](https://aka.ms/learn-fusiondev)"},{"id":"2023-day5","metadata":{"permalink":"/Low-Code/blog/2023-day5","source":"@site/blog/2023-lcf/2023-02-05/index.md","title":"5. Recap - Fundamentals Week \u2728","description":"Let\'s recap Week 1 of #30DaysOfLowCode focused on #PowerPlatform Fundamentals - join us at #LowCodeFebruary https://aka.ms/lowcode-february","date":"2023-02-05T00:00:00.000Z","formattedDate":"February 5, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"},{"label":"recap","permalink":"/Low-Code/blog/tags/recap"}],"readingTime":4.275,"hasTruncateMarker":false,"authors":[{"name":"Sonja Gu","title":"Product Marketing Manager","url":"https://github.com/SonjaGu","imageURL":"https://github.com/SonjaGu.png","key":"sonja"},{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"2023-day5","title":"5. Recap - Fundamentals Week \u2728","authors":["sonja","nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform fundamentals","30DaysOfLowCode","recap"],"image":"https://microsoft.github.io/Low-Code/img/og/30-05.png","description":"Let\'s recap Week 1 of #30DaysOfLowCode focused on #PowerPlatform Fundamentals - join us at #LowCodeFebruary https://aka.ms/lowcode-february","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","recap"]},"prevItem":{"title":"6. Let\'s Make Some Connections!","permalink":"/Low-Code/blog/2023-day6"},"nextItem":{"title":"4. Developer Stories","permalink":"/Low-Code/blog/2023-day4"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day5\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"5. Week 1 - Recap\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Let\'s recap Week 1 of #30DaysOfLowCode focused on #PowerPlatform Fundamentals - join us at #LowCodeFebruary https://aka.ms/lowcode-february\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-05.png\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day5\\" />\\n</head>\\n\\nWelcome to `Day 05` of #30DaysOfLowCode!\\n\\n## What We\'ll Cover\\n * **Look Back**: Recap Fundamentals Week\\n * **Self-Study**: Resources to dive deeper\\n * **Look Ahead**: It\'s Integrations Week!\\n * **Activity**: Sign up for your [Developer Plan](https://aka.ms/lowcode-february/devplan)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/lowcode-february/collection)\\n\\n![#30DaysOfLowCode Week 1 Recap](./../../../static/img/og/30-05.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n\\n## Look Back: Week 1 Recap\\nWow, Low Code February is a hit! We\'ve had **40k+ visits** to our website campaign and **1400+ of you** signed up to take the Cloud Skills Challenge and _skill yourself on all things low code_! This is incredible and we\'re super honored to have built something that you, the community, have found valuable! We know that we couldn\'t have gone so far without the support from everyone of you who\'s reading this blog right now. THANK YOU! \u2764\ufe0f\\n\\n![Week 1 Roadmap](./../../../static/img/og/30-roadmap-week1.png)\\n\\nHere are the highlights for week 1. If you\'re just joining us, welcome!! It\'s not too late to get started learning and skilling up, with two core activities:\\n \\n1. [**Cloud skills Challenge**](https://aka.ms/lowcode-february/challenge) - gives you a free curated set of learning modules to jumpstart your learning journey into Low Code and Fusion development. Get building amazing Power Platform solutions using pro-code tools and frameworks. Register now and get on the leaderboard!\\n\\n2. [**#30DaysOfLowCode**](https://aka.ms/lowcode-february/blog) - gives you daily blog posts from experts. We started this week with a look at **Power Platform fundamentals** (core concepts) and ended it with a look at **Developer Stories** celebrating our low-code and code-first developer communities with real-world case studies.\\n    * \ud83e\udd47 First time hearing the term _low-code_ and want to learn how it helps in your day-to-day work? Read [**You say Low, I say Code!**](https://microsoft.github.io/Low-Code/blog/2023-day2) for a quick introduction. \\n    * \ud83c\udd95 Never used _Power Platform before_? Read [**DevTools & Onboarding**](http://localhost:3000/Low-Code/blog/2023-day3) to get full onboarding guidance, and setup your development environment for success!\\n    * \ud83d\ude80 Want to hear stories from your peers, and understand why more and more code-first developers have turned to low-code and embrace the technology in their daily work? Read [**Developer Stories**](https://aka.ms/lowcode-february/blog/PowerForPros) posted by our amazing Power Platforms PM team at [**ZeroToHero**\ud83d\ude80](https://aka.ms/lowcode-february/0ToHero).\\n\\n\\n## Self-Study: Resources\\nDon\'t have the time to follow day by day? Here\'re 3 self-study materials that you should know about to help you learn at your own pace: \\n1. [**Resource Collection**](https://aka.ms/lowcode-february/collection): Bookmark the collection for a 1-stop resource containing all relevant links to documentation and training, as covered in the #30DaysOfLowCode blogs. \\n2. [**Hands-on Workshops**](https://aka.ms/lowcode-february/workshop): learn by doing! These labs help you gain hands-on experience from intro to advanced, whereever you\'re in the learning path. \\n3. [**Ask The Experts!**](http://localhost:3000/Low-Code/lowcode-february/Video-Live#ask-the-experts): get your questions answered! Pick a time that works best for you and enjoy a face to face discussion with our leaderships:\\n    1. \ud83c\udf99 [**Feb 23, 9AM PST**](https://aka.ms/ATE0223/RSVP ) - Join this session for Q&A from the **Powerful Devs Conference** team. The Powerful Devs Conference focuses on showcasing how code first developers can integrate with the Power Platform to innovate faster. We will have experts on hand to answer questions about full code and low code integration.\\n    2. \ud83c\udf99 [**Mar 09, 9AM PST**](https://aka.ms/ATE0309/RSVP) - Join this session for Q&A from the **Low Code February** team, including authors of this #30DaysOfLowCode series. We will have experts in code-first integration with the Power Platform live to answer questions related to the content and cloud skills challenge of the Low Code February event.\\n4. [**Learn Live!**:](https://aka.ms/lowcode-february/LearnLive) Have questions for Microsoft Learn modules or the cloud skills challenge? Join our **Learn Live** sessions to hear tips and commentary from experts:\\n* 1\ufe0f\u20e3 [**Feb 06**](https://aka.ms/lowcode-february/LearnLive) - Low code as a traditional developer\\n* 2\ufe0f\u20e3 [**Feb 13**](https://aka.ms/lowcode-february/LearnLive) - Integrate OpenAPI-enabled Web APIs with Azure API Management\\n* 3\ufe0f\u20e3 [**Feb 27**](https://aka.ms/lowcode-february/LearnLive) - Manage Microsoft Power Platform deployments\\n ![Feb5 Banner](./LearnLive.png)\\n\\n\\n## Feb 15: PowerfulDevs Conf\\n\\nDo you know the [**Powerful Dev Conf**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) happens in just 10 days, on **Feb 15**? It\'s a signature 2-hour event where you can hear from many of the experts, including authors from this series, on the features and usage of the Power Platform! Check out the great speaker lineup below and visit [the site](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) to see the scheduled sessions.\\n\\n![Feb5 Banner](./PowerFulDev.png)\\n\\n:::info REGISTER NOW - IT\'S FREE & ONLINE!\\n * [**Sign up**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) for a reminder and link to the livestream.\\n * Then #SaveTheDate and join us **Feb 15**\\n:::\\n\\n\\n## Look Forward: Week 2 Plan\\n\\nDon\'t forget to bookmark the [**#30DaysOfLowCode**](https://aka.ms/lowcode-february/blog) page and come back tomorrow, where we will cover everything you need to know about Power Platform Backend Integrations in week 2. \\n\\nFrom utilizing built-in connectors to building custom connectors, integrating with backend data source, and creating serverless apps. We will showcase the latest functionalities we have, help you learn with tutorials, demos, and real world best practices that you can apply to your business immediately. \\n\\n![Week 2 Roadmap](./../../../static/img/og/30-week2.png)"},{"id":"2023-day4","metadata":{"permalink":"/Low-Code/blog/2023-day4","source":"@site/blog/2023-lcf/2023-02-04/index.md","title":"4. Developer Stories","description":"Software developers around the world are embracing low-code as a powerful part of their toolkit \u2014 let\'s meet some of the developers and organizations and hear their stories..","date":"2023-02-04T00:00:00.000Z","formattedDate":"February 4, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":2.13,"hasTruncateMarker":false,"authors":[{"name":"Sameer Chabungbam","title":"Principal Program Manager Lead","url":"https://github.com/schabungbam","imageURL":"https://github.com/schabungbam.png","key":"sameer"},{"name":"Taiki Yoshida","title":"Principal Program Manager","url":"https://github.com/taiki-yoshida","imageURL":"https://github.com/taiki-yoshida.png","key":"taiki"},{"name":"Phil Topness","title":"Power CAT (Customer Advisory Team)","url":"https://github.com/topness-msft/","imageURL":"https://github.com/topness-msft.png","key":"phil"}],"frontMatter":{"slug":"2023-day4","title":"4. Developer Stories","authors":["sameer","taiki","phil"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["developer stories","zero-to-hero","power platform","low code development","30DaysOfLowCode"],"image":"https://microsoft.github.io/Low-Code/img/og/30-04.png","description":"Software developers around the world are embracing low-code as a powerful part of their toolkit \u2014 let\'s meet some of the developers and organizations and hear their stories..","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"5. Recap - Fundamentals Week \u2728","permalink":"/Low-Code/blog/2023-day5"},"nextItem":{"title":"3. DevTools & Onboarding","permalink":"/Low-Code/blog/2023-day3"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day4\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"4. Developer Stories\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Software developers around the world are embracing low-code as a powerful part of their toolkit \u2014 let\'s meet some of the developers and organizations and hear their stories..\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-04.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day4\\" />\\n</head>\\n\\nWelcome to `Day 04` of #30DaysOfLowCode!\\n\\nToday we celebrate all the developers and organizations who make the low code ecosystem successful.\\n\\n## What We\'ll Cover\\n * About Zero To Hero\\n * Meet The Developers\\n * Meet The Organizations\\n * Solution Architecture Examples\\n * **Activity**: Sign up for your [Developer Plan](https://aka.ms/lowcode-february/devplan)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/lowcode-february/collection)\\n\\n\\n![#30DaysOfLowCode Developer Stories](./../../../static/img/og/30-04.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## About Zero To Hero\\n\\nDid you know we had a [dedicated Zero To Hero page](/lowcode-february/ZeroToHero) on this site? It\'s our page for amplifying news, articles and updates on technologies and products for low code development - directly from product teams! Here\'s what that page look like. Click on any article to visit the _original_ content on the Product Group blog. Or click the **tag** under a post (e.g., `Announcements`) to view _all_ posts for that category.\\n\\n![](./zero-to-hero.png)\\n\\n## Meet The Developers\\n\\nMeet featured developer **Gini Brandon** and watch her as she shares her journey of adopting low-code as a professional developer! In the video, Gini talks about her journey graduating with a computer science degree, how she\u2019s been able to increase efficiency using Power Platform, why she believes low code is the future of development, and how you can get started.\\n\\n\u2728 Read It Now: [**Meet developers combining Power Platform and Azure to go faster**](https://powerapps.microsoft.com/blog/meet-the-developers-combining-power-platform-and-azure-to-go-faster/)\\n\\n[![](https://powerappsblogscdn.azureedge.net/wp-content/uploads/2023/02/ginibrandon_cover-1024x576.png)](https://www.youtube.com/watch?v=OrWDTi8GVfM)\\n\\n## Meet The Organizations\\n\\nOrganizations around the globe have adopted Microsoft Power Platform along with Azure and Dynamics 365 to build flagship applications and establish centers of excellence to scale adoption and impact of low-code solutions.\\n\\n\u2728 Read It Now: [**Meet The Organizations**](https://powerapps.microsoft.com/blog/meet-the-developers-combining-power-platform-and-azure-to-go-faster/#meet-organizations)\\n\\n## Solution Architecture Examples\\n\\nExplore a few real-world solution architecture examples that show how low-code capabilities in Power Platform are used in conjunction with code-first programming patterns and capabilities in Microsoft Azure. Here are just a subset of those stories:\\n * Rabobank \u2013 Scaling adoption across the organization \\n * EY \u2013 Loan forgiveness portal\\n * Blackmores Group \u2013 Enabling rapid development of new products\\n * IKEA Sweden \u2013 Reimagining the customer experience\\n * Western States Caterpillar: Mobile apps for the field\\n\\n\u2728 Read It Now: [**Solution Architecture Examples**](https://powerapps.microsoft.com/blog/meet-the-developers-combining-power-platform-and-azure-to-go-faster/#architecture-examples)"},{"id":"2023-day3","metadata":{"permalink":"/Low-Code/blog/2023-day3","source":"@site/blog/2023-lcf/2023-02-03/01 - Get onboard with Power Platform.md","title":"3. DevTools & Onboarding","description":"Learn how you can get onboard with Power Platform by signing up forthe Power Apps Developer Plan!","date":"2023-02-03T00:00:00.000Z","formattedDate":"February 3, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":2.68,"hasTruncateMarker":false,"authors":[{"name":"Marcel Ferreira","title":"Senior Program Manager","url":"https://github.com/marcelbf","imageURL":"https://github.com/marcelbf.png","key":"marcel"}],"frontMatter":{"slug":"2023-day3","title":"3. DevTools & Onboarding","authors":["marcel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform"],"image":"https://microsoft.github.io/Low-Code/img/og/30-03.png","description":"Learn how you can get onboard with Power Platform by signing up forthe Power Apps Developer Plan!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"4. Developer Stories","permalink":"/Low-Code/blog/2023-day4"},"nextItem":{"title":"2. You say Low, I say Code!","permalink":"/Low-Code/blog/2023-day2"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day3\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"3. DevTools & Onboarding\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Learn how you can get onboard with Power Platform by signing up forthe Power Apps Developer Plan!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-03.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day3\\" />\\n</head>\\n\\nWelcome to `Day #03` of #30DaysOfLowCode!\\n\\n\\n## What We\'ll Cover\\n * Get onboard with Power Platform\\n * Sign up for the Power Apps Developer Plan\\n * Get familiar with the tools\\n * **Activity**: Sign up for your [Developer Plan](https://aka.ms/lowcode-february/devplan)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/lowcode-february/collection)\\n\\n![Developer Tools and Onboarding](./../../../static/img/og/30-03.png)\\n\\n\\n## Get onboard with Power Platform!\\n\\nI\'m excited to announce that now you can create up to 3 developer environments with the Power Apps Developer Plan! Let\'s take this opportunity to review how to get a free environment to get started.\\n\\n## Sign up for the Power Apps Developer Plan\\n\\nThe Power Apps Developer Plan gives you a free development environment to build and test with Power Apps, Power Automate, and Microsoft Dataverse.\\nIt just takes a few minutes to get a developer environment for Power Platform:\\n\\n1. Ensure that you have a work account. If you don\'t,\xa0you can [create a test tenant first.](#do-i-need-a-test-tenant)\\n2. Sign up on the\xa0[Power Apps Developer Plan website](https://aka.ms/lowcode-february/devplan).\\n3. Once the sign up is complete, you will be redirected to your new developer environment.\\n\\n![Power Apps Developer Plan - sign up process](01%20-%20devplan%20signup.gif)\\n*Power Apps Developer Plan - sign up process*\\n\\n### Do I need a test tenant?\\n\\nIn an ideal world you would use your existing work account to sign up for the Power Apps Developer Plan. If you already have an Azure account, you likely can use the same account to sign up. If this is not possible for any reason, you can create a free test tenant using the [Microsoft 365 Developer Program](https://learn.microsoft.com/power-platform/developer/create-developer-environment#how-to-create-a-test-tenant).\\n\\n## Get familiar with the tools\\n\\nAfter the sign up you will be in the [https://make.powerapps.com](https://make.powerapps.com) and your environment will be ready to use. You can start creating your first Power App.\\n\\nIf you would like to create more environments or manage your environment, visit the [Power Platform Administrator Center.](https://aka.ms/ppac)\\n\\n![Create new environments in the Power Platform Admin Center](01%20-%20devplan%20PPAC.gif)\\n*Create new environments in the Power Platform Admin Center*\\n\\nIf you are a code first developer, you can use the Power Platform CLI to manage your environments, create code first components and much more. The best way to get our CLI is to download the [Visual Studio Code extension.](https://learn.microsoft.com/power-platform/developer/cli/introduction)\\n\\n![Power Platform Tools for Visual Studio Code](01%20-%20devplan%20CLI.gif)\\n*Power Platform Tools for Visual Studio Code*\\n\\n## What\'s next?\\n\\nAre you a code first developer? To understand how Power Platform can make you more productive and how you can use code to extend the platform, check the [Introduction to Microsoft Power Platform for developers](https://learn.microsoft.com/power-platform/developer/get-started).\\n\\n* For detailed information on the Power Apps Developer plan: [Sign up for Power Apps Developer Plan](https://learn.microsoft.com/power-apps/maker/developer-plan)\\n\\n* For detailed information on licensing: [Licensing overview for Microsoft Power Platform](https://learn.microsoft.com/power-platform/admin/pricing-billing-skus)\\n\\nHappy coding \ud83c\udf89.\\n\\n## Resources\\n* [Introduction to the Power Platform](https://learn.microsoft.com/training/modules/introduction-power-platform//?WT.mc_id=power-82212-apdunnam)\\n* [Fusion Development with Power Platform EBook](https://learn.microsoft.com/power-apps/guidance/fusion-dev-ebook/?WT.mc_id=power-82212-apdunnam)\\n* [Fusion Development with Power Platform Learning Path](https://learn.microsoft.com/training/paths/transform-business-applications-with-fusion-development/?WT.mc_id=power-82212-apdunnam)\\n* [Learn Collection: LowCode February](https://aka.ms/lowcode-february/collection)\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day2","metadata":{"permalink":"/Low-Code/blog/2023-day2","source":"@site/blog/2023-lcf/2023-02-02/02_YouSayLowISayCode.md","title":"2. You say Low, I say Code!","description":"Welcome to #LowCodeFebruary! Join us for #30DaysOfLowCode learning, skilling and discussions at https://aka.ms/lowcode-february. Today we talk about what Low Code means, and how Power Platform can help!","date":"2023-02-02T00:00:00.000Z","formattedDate":"February 2, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":4.535,"hasTruncateMarker":false,"authors":[{"name":"April Dunnam","title":"Power Platform Advocacy Lead","url":"https://github.com/AprilDunnam","imageURL":"https://github.com/AprilDunnam.png","key":"april"},{"name":"Matt Soucoup","title":".NET Advocacy Lead","url":"https://github.com/codemillmatt","imageURL":"https://github.com/codemillmatt.png","key":"matt"}],"frontMatter":{"slug":"2023-day2","title":"2. You say Low, I say Code!","authors":["april","matt"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["lowcode-february","power platform"],"image":"https://microsoft.github.io/Low-Code/img/og/30-02.png","description":"Welcome to #LowCodeFebruary! Join us for #30DaysOfLowCode learning, skilling and discussions at https://aka.ms/lowcode-february. Today we talk about what Low Code means, and how Power Platform can help!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"3. DevTools & Onboarding","permalink":"/Low-Code/blog/2023-day3"},"nextItem":{"title":"1. Hello, 30DaysOfLowCode!","permalink":"/Low-Code/blog/2023-day1"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day2\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"You say Low, I say Code!\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Welcome to #LowCodeFebruary! Join us for #30DaysOfLowCode learning, skilling and discussions at https://aka.ms/lowcode-february. Today we talk about what Low Code means, and how Power Platform can help!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-02.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@aprildunnam\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day2\\" />\\n</head>\\n\\n\\nWelcome to `Day 02` of #30DaysOfLowCode!\\n\\n\\n## What We\'ll Cover\\n * What is Low Code?\\n * How are the Benefits? \\n * What does Power Platform Provide?\\n * How can we extend Power Platform?\\n * **Activity**: Join the [Cloud Skills Challenge](https://aka.ms/lowcode-february/challenge)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/lowcode-february/collection)\\n\\n![You say Low, I say Code!](./../../../static/img/og/30-02.png)\\n\\n\\n## You say Low, I say Code!\\n\\nThere is a low code revolution underway. We have a surging digital demand with an estimated 500 million more apps that will need to be created in the next 5 years. More and more companies are leveraging low code and no code platforms to bridge this app gap and address workflow and automation needs. In fact, Gartner estimates that 65% of application development will be low code by 2024.\\n\\nWith low code tools like the Power Platform making it easier for business technologists to develop solutions, you might wonder if there\'s any room for a code first developer in this low code revolution. Well, the answer is, absolutely there is! In fact, code first developers are a critical piece to the puzzle.\\n\\n## What is \\"low code\\"?\\n\\nThe term \\"low code\\" can mean different things to different people when they first hear it. What we mean when we talk about low code is that with tools like Power Apps, you only need to write a small amount of code to get results that would normally take several more lines of code in a traditional programming language.\\n\\n![What is Low Code](./02_WhatIsLowCode.png)\\n\\nIn canvas-based Power Apps, the low code scripting language used is called [Power Fx](https://aka.ms/LearnPowerFx). This language is based on the Microsoft Excel formula language which meets many business technologists where they are by leveraging the knowledge they already have.\\n\\n## Low Code + Full Code = No Cliffs\\n\\nUsing low-code tools is key to helping to resolve the existing and impending app gap challenge but that doesn\'t mean that low code alone can solve every business problem. Low code tools like the Power Platform\'s full potential is unlocked when you combine the low code capabilities with code first development.\\n\\nThe combination of low code + full code creates what we call a \\"no cliffs\\" experience that allows business technologists to easily build solutions with low code while professional developers can leverage full code to augment and extend the platform capabilities. The process of low code developers, IT pros and full code developers working together like this is often referred to as \\"fusion development\\".\\n\\n![Fusion Development Process](./02_FusionDevProcess.png)\\n\\n## What does the Power Platform Provide?\\n\\nThe Power Platform gives us a holistic suite of low code tools that work together to help us solve business problems. The key products and components of the Power Platform include:\\n\\n* **Power Apps** for creating custom applications for web and mobile that can be integrated with a variety of systems and services.\\n* **Power Automate** for automation tasks and orchestrating activities across various services\\n* **Power BI** for business analytics and interactive data visualization\\n* **Power Virtual Agents** for creating AI-powered chatbots that can answer questions from your customers and employees\\n* **Power Pages** for secure, enterprise-grade external-facing business websites\\n* **Dataverse** which provides a cloud scale data store with robust security that abstracts away data management complexity from the app maker\\n\\n![Power Platform Overview](./02_PowerPlatformOverview.png)\\n\\n## How can we extend Power Platform solutions?\\n\\nYou might wondering how you can leverage your code first skills with the Power Platform. Let\'s take a look at some ways that we can extend our Power Platform solutions with code (many of these concepts will be covered in more detail in later blog posts).\\n\\n* **UI Components** - Leverage the [Power Apps Component Framework](https://aka.ms/LowCodePCF) to extend the UI of our applications with custom code.\\n* **Custom Connectors** - Create [custom connectors](https://aka.ms/LowCodeCustomConnectors), which are essentially a wrapper around an API to communicate to our external data sources and services.\\n* **Custom Visuals in Power BI** - Use the open-source SDK to create [custom visuals](https://aka.ms/LowCodeCustomVisuals) for your reports and dashboards\\n* **Custom Business Logic** - Extend the [Dataverse API](https://aka.ms/LowCodeDataverseAPI) with your own custom API that implements your business logic\\n* **Add CI/CD** - Setup continuous integration and continuous deployment ([CI/CD](https://aka.ms/LowCodeALM)) with your Power Platform solutions\\n\\n![Power Platform Pro Dev extensions](./02_Extend.png)\\n\\n## What\'s next?\\n\\nIn the next series of posts you\'ll learn more about some of these core concepts and extension points. \\n\\nIf all of this sounds intriguing and you want to get started on your low code development journey, here are some actions you can take:\\n\\n* 1\ufe0f\u20e3 [**Sign up**](https://aka.ms/lowcode-february/devplan) for the free Power Apps Developer Plan.\\n* 2\ufe0f\u20e3 [**Enroll**](https://aka.ms/lowcode-february/challenge) in the Cloud Skills Challenge to learn more about low code and fusion team fundamentals and start climbing that leaderboard!\\n* 3\ufe0f\u20e3 [**Save**](http://aka.ms/lowcode-february) the page to start your learning on Feb 1, and [**Subscribe**](https://microsoft.github.io/Low-Code/blog/rss.xml) to the blog in your favorite feed reader for updates.\\n\\n## Resources\\n* [Introduction to the Power Platform](https://learn.microsoft.com/training/modules/introduction-power-platform//?WT.mc_id=power-82212-apdunnam)\\n* [Fusion Development with Power Platform EBook](https://learn.microsoft.com/power-apps/guidance/fusion-dev-ebook/?WT.mc_id=power-82212-apdunnam)\\n* [Fusion Development with Power Platform Learning Path](https://learn.microsoft.com/training/paths/transform-business-applications-with-fusion-development/?WT.mc_id=power-82212-apdunnam)\\n* [Learn Collection: LowCode February](https://aka.ms/lowcode-february/collection)\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day1","metadata":{"permalink":"/Low-Code/blog/2023-day1","source":"@site/blog/2023-lcf/2023-02-01/Feb01 - Hello.md","title":"1. Hello, 30DaysOfLowCode!","description":"Welcome to #LowCodeFebruary! Join us for #30DaysOfLowCode learning, skilling and discussions at https://aka.ms/lowcode-february","date":"2023-02-01T00:00:00.000Z","formattedDate":"February 1, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"}],"readingTime":3.985,"hasTruncateMarker":false,"authors":[{"name":"Sonja Gu","title":"Product Marketing Manager","url":"https://github.com/SonjaGu","imageURL":"https://github.com/SonjaGu.png","key":"sonja"},{"name":"April Dunnam","title":"Power Platform Advocacy Lead","url":"https://github.com/AprilDunnam","imageURL":"https://github.com/AprilDunnam.png","key":"april"},{"name":"Matt Soucoup","title":".NET Advocacy Lead","url":"https://github.com/codemillmatt","imageURL":"https://github.com/codemillmatt.png","key":"matt"},{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Justin Yoo","title":"Senior Cloud Advocate (.NET)","url":"https://github.com/justinyoo","imageURL":"https://github.com/justinyoo.png","key":"justin"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"},{"name":"Gomolemo Mohapi","title":"Cloud Advocate","url":"https://github.com/gomomohapi","imageURL":"https://github.com/gomomohapi.png","key":"gomolemo"},{"name":"Srikumar Nair","title":"Principal Group Program Manager","url":"https://github.com/MicroSri","imageURL":"https://github.com/MicroSri.png","key":"srikumar"},{"name":"Julia Kasper","title":"Program Manager II","url":"https://github.com/juliajuju93","imageURL":"https://github.com/juliajuju93.png","key":"julia"},{"name":"Kartik Kanakasabesan","title":"Principal Program Manager","url":"https://github.com/kkanakas","imageURL":"https://github.com/kkanakas.png","key":"kartik"},{"name":"Sameer Chabungbam","title":"Principal Program Manager Lead","url":"https://github.com/schabungbam","imageURL":"https://github.com/schabungbam.png","key":"sameer"},{"name":"Taiki Yoshida","title":"Principal Program Manager","url":"https://github.com/taiki-yoshida","imageURL":"https://github.com/taiki-yoshida.png","key":"taiki"},{"name":"Marcel Ferreira","title":"Senior Program Manager","url":"https://github.com/marcelbf","imageURL":"https://github.com/marcelbf.png","key":"marcel"},{"name":"Evan Lew","title":"GPM, Power Apps (Ent. Platform)","url":"https://github.com/evanmlew","imageURL":"https://github.com/evanmlew.png","key":"evan"},{"name":"Casey Burke","title":"Principal Product Manager","url":"https://github.com/caburk","imageURL":"https://github.com/caburk.png","key":"casey"},{"name":"Linda Nichols","title":"Principal Solution Spec GBB","url":"https://github.com/lynnaloo","imageURL":"https://github.com/lynnaloo.png","key":"linda"},{"name":"Phil Topness","title":"Power CAT (Customer Advisory Team)","url":"https://github.com/topness-msft/","imageURL":"https://github.com/topness-msft.png","key":"phil"}],"frontMatter":{"slug":"2023-day1","title":"1. Hello, 30DaysOfLowCode!","authors":["sonja","april","matt","nitya","justin","daniel","gomolemo","srikumar","julia","kartik","sameer","taiki","marcel","evan","casey","linda","phil"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["lowcode-february","power platform"],"image":"https://microsoft.github.io/Low-Code/img/og/30-01.png","description":"Welcome to #LowCodeFebruary! Join us for #30DaysOfLowCode learning, skilling and discussions at https://aka.ms/lowcode-february","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"2. You say Low, I say Code!","permalink":"/Low-Code/blog/2023-day2"},"nextItem":{"title":"It\'s a Low Code February!","permalink":"/Low-Code/blog/2023-kickoff"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day1\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Hello, 30DaysOfLowCode!\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Welcome to #LowCodeFebruary! Join us for #30DaysOfLowCode learning, skilling and discussions at https://aka.ms/lowcode-february\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-01.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day1\\" />\\n</head>\\n\\nWelcome to `Day 01` of #30DaysOfLowCode!\\n\\n## What We\'ll Cover\\n * Why Low-Code?\\n * Start low coding with Microsoft!\\n * The full Low-Code February lineup  \\n * **Exercise:** Take the [**Cloud Skills Challenge!**](https://learn.microsoft.com/training/challenges?id=464c05e3-f1ae-400f-b5df-2dcd5299d347&%3FWT.mc_id=javascript-82212-ninarasi)\\n * ** Resources:** Sign up for the free [**Power Apps Developer Plan!**](https://aka.ms/lowcode-february/devplan)\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Post Banner](./../../../static/img/og/30-01.png)\\n\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n\\n## Why Low Code?\\n\\nAs the market for low-code platform continues to flourish (with projected growth this year of nearly 20% over 2022), now is the time to explore what it can mean for you. \\n\\n[**Low-code development**](https://powerapps.microsoft.com/what-is-low-code/) are becoming more popular as businesses look for ways to modernize their IT infrastructure and generate more output in less time. \\n\\nDevelopers can focus on the creative aspects of app building while still taking advantage of powerful cloud computing technologies such as scalability, security, and reliability.\\n\\nStarting today, we invite you to spend a month getting the low-down on low-code development with an exciting series of tutorials, workshops, and interactive resources during [**#LowCodeFebruary**](https://aka.ms/lowcode-february).\\n\\n## Start low coding with Microsoft\\n\\nWith [**Microsoft Power Apps**](https://powerapps.microsoft.com/) you can quickly build custom apps with drag-and-drop tools and pre-built templates, making it easier to create powerful apps that are tailored for your needs.  Low-code development with Azure helps businesses accelerate their innovation cycle and make the most out of their data resources. \\n\\nLow-code app development through Microsoft Power Platform and Azure can be used to automate workflows, reduce manual efforts, and speed up the development process for building line-of-business apps at a lower cost.\\n\\nAccording to [**Forrester**](https://aka.ms/2022ForresterTEI), composite organizations experience benefits of **140% ROI** and **45% cost reduction** in app development when using Power Platform premium capabilities. The majority of users say Power Platform\u2019s premium capabilities increase revenue and offers faster solution quoting through better data integration. \\n\\nIn other words, with Power Platform you\u2019ll produce more and better code than before, with increased cost savings. That means developing more projects and delivering increased value to your clients. With low code, everyone wins!\\n\\n![Empty Banner Placeholder](./01%20-%20Kickoff.png)\\n\\n## The full Low-Code February lineup\\n\\nWe want to give developers the resources you need to enhance your knowledge and skill in low code. [**Low Code February**](https://aka.ms/lowcode-february) is a month-long celebration during which we\u2019ll help participants learn the nuts and bolts of low-code development. \\n\\nYou will have access to a series of hands-on workshops, self-guided learning courses, skill challengies, conversations with experts, and a community of fellow learners that will give you the necessary tools to start building in 30 days. \\n\\nAll throughout Low Code February we\u2019ll be running **6 hero initiatives** to help you get the most of your newfound knowledge:\\n\\n1. [**#30DaysOfLowCode**](https://microsoft.github.io/Low-Code/lowcode-february/30Days/) blog series, during which developers can engage with a daily lesson and skill up on [Power Fx](https://learn.microsoft.com/power-platform/power-fx/overview), [PCF](https://learn.microsoft.com/power-apps/developer/component-framework/overview) (Power Component Framework), [ALM](https://learn.microsoft.com/power-platform/alm/overview-alm) (App Lifecycle Management), [Azure DevOps](https://azure.microsoft.com/products/devops/), [GitHub Actions](https://learn.microsoft.com/power-platform/alm/devops-github-actions), and more. \\n\\n* [**#30DaysOfLowCode**](https://microsoft.github.io/Low-Code/lowcode-february/30Days/) \ud83d\udcc5 roadmap:\\n\\n* **Week 1\ufe0f\u20e3: Fundamentals** Kick off with a comprehensive introduction to low code with onboarding experience, tooling, developer stories and more.\\n* **Week 2\ufe0f\u20e3: Backend Integrations** Dive into the nitty-gritty of low-code development with topics like built-in connectors, dataverse, custom connectors, API management, and Azure integration. \\n* **Week 3\ufe0f\u20e3: User Interface** \\nPut your knowledge to the test by building a Canvas app, plus get an introduction to PowerFX, power component framework controls, and advanced use cases.\\n* **Week 4\ufe0f\u20e3: Dev Experience**\\nTake your skills to the next level with tutorials on ALM, GitHub Actions, app governance, Power Platform pipelines, and automated testing. \\n* **Week 5\ufe0f\u20e3: Wrap-up**\\n\\n2. [**#ZeroToHero**](/lowcode-february/ZeroToHero/) \ud83e\uddb8\u200d\u2640\ufe0f Get the latest updates on technologies and products for low code development directly from product teams.\\n3. [**Video + Livestream**](/lowcode-february/Video-Live/) \ud83d\udcfb Join online conversations with product teams and ask questions.  \\n4. [**Cloud Skills Challenge**](https://aka.ms/lowcode-february/challenge) \u2601\ufe0f Skill up on key cloud technologies with free, self-guided learning courses, and compete to make the leaderboard!\\n5. [**Dev Workshops**](/docs/intro/) \u2692\ufe0f Explore workshops in your own time as you work through various \\nfeatures or solutions in self-guided mode.\\n6. [**Community Buzz**](https://pnp.github.io/powerplatform-samples/) \ud83d\udca1 Connect with the community and contribute your expertise by building interesting demos or writing articles.\\n\\n## Get started today!\\n\\nWant to get started on your low code development journey with us? Here are some actions you can take today:\\n\\n1. [**Sign up**](https://aka.ms/lowcode-february/devplan) for the free Power Apps Developer Plan. \ud83d\ude4c \\n2. [**Enroll**](https://aka.ms/lowcode-february/challenge) in the Cloud Skills Challenge and start climbing that leaderboard! \u2601\ufe0f\\n3. [**Save**](http://aka.ms/lowcode-february) the page and [**Subscribe**](https://microsoft.github.io/Low-Code/blog/rss.xml) to the blog in your favorite feed reader for updates. \ud83d\udd16\\n\\n![Empty Banner Placeholder](./Feb01%20-%20Banner.png)"},{"id":"2023-kickoff","metadata":{"permalink":"/Low-Code/blog/2023-kickoff","source":"@site/blog/2023-lcf/2023-01-25/01 - Kickoff.md","title":"It\'s a Low Code February!","description":"We are excited to announce the launch of #LowCodeFebruary https://aka.ms/lowcode-february - a month-long developer journey that will take you from app development tips, to fusion teams insights, and hands-on tutorials to skill you up on Power Platform, Microsoft Azure!","date":"2023-01-25T00:00:00.000Z","formattedDate":"January 25, 2023","tags":[{"label":"low-code-february","permalink":"/Low-Code/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/Low-Code/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/Low-Code/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/Low-Code/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/Low-Code/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/Low-Code/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/Low-Code/blog/tags/power-platform"},{"label":"kickoff","permalink":"/Low-Code/blog/tags/kickoff"}],"readingTime":2.645,"hasTruncateMarker":false,"authors":[{"name":"Sonja Gu","title":"Product Marketing Manager","url":"https://github.com/SonjaGu","imageURL":"https://github.com/SonjaGu.png","key":"sonja"},{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"2023-kickoff","title":"It\'s a Low Code February!","authors":["sonja","nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform fundamentals","30DaysOfLowCode","recap"],"image":"https://microsoft.github.io/Low-Code/img/og/30days-title.png","description":"We are excited to announce the launch of #LowCodeFebruary https://aka.ms/lowcode-february - a month-long developer journey that will take you from app development tips, to fusion teams insights, and hands-on tutorials to skill you up on Power Platform, Microsoft Azure!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","kickoff"]},"prevItem":{"title":"1. Hello, 30DaysOfLowCode!","permalink":"/Low-Code/blog/2023-day1"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-kickoff\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"5. Week 1 - Recap\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"We are excited to announce the launch of #LowCodeFebruary https://aka.ms/lowcode-february - a month-long developer journey that will take you from app development tips, to fusion teams insights, and hands-on tutorials to skill you up on Power Platform, Microsoft Azure!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30days-title.png\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-kickoff\\" />\\n</head>\\n\\n\\n## Welcome to Low Code February!\\n\\nFebruary is traditionally a month where we celebrate family, friends and loved ones - from Valentine\'s Day to Lunar New Year! We hope you also make this the month you fall in love with a new technology space - _low-code app development_ - and join us for a month of learning, making, and sharing!\\n\\n![#30DaysOfLowCode Kickoff](./../../../static/img/og/30days-title.png)\\n\\nWe are excited to announce the **launch of #LowCodeFebruary**, a month-long developer journey that will take you from app development tips, to fusion teams insights, and hands-on tutorials to skill you up on Power Platform, Microsoft Azure, and popular developer tools to enhance your productivity.\\n\\n## What will we cover?\\n\\nLet\'s talk about what you will learn in our developer journey this month. We have multiple initiatives in mind that can help you _learn_, _skill up_, _engage with experts_, _contribute to community_ and _watch videos_ at your own pace. \\n\\n![LCF Banner](../../../static/img/lcf-banner.png)\\n\\n1. The [**#30DaysOfLowCode**](/blog) blog series helps you _learn_ by reading posts from experts, taking you on a 4-week journey from fundamentals, to application lifecycle managment - and cover developer tools and best practices along the way!\\n2. The [**#ZeroToHero**](/lowcode-february/ZeroToHero/) series captures blog posts directly from our product teams, sharing the latest features and tips for low code development.\\n3. The [**Dev Workshops**](/docs/intro/) page will learning tutorials and resources for all levels, from beginner to advanced.Learn how to build scalable apps, manage app lifecycle management with the Azure services and use popular Developer tools for enhanced productivity.  \\n4. The [**Cloud Skills Challenge**](https://aka.ms/lowcode-february/challenge) is a set of curated free, self-guided learning modules _focused on fusion teams and low-code development_. Complete them in #30Days and make the leaderboard!\\n5. The [**Video + Livestream**](/lowcode-february/Video-Live/) page showcases live events (e.g., AskTheExpert, LearnLive) and on-demand video shows (e.g., LowCode Revolution) and replays, to help you learn at your own pace. \\n6. The [**Community Buzz**](https://pnp.github.io/powerplatform-samples/) section connects you to peer community members. Share your samples and learn from 90+ real-world Power Platform examples shared by the community. And share your contributions with us via GitHub issues or with a [post on dev.to usingthe #powerfuldevs tag](https://dev.to/t/powerfuldevs).\\n \\n \\n## How can you participate?\\n\\nWant to get started on your low code development journey with us? Here are some actions you can take today:\\n\\n* 1\ufe0f\u20e3 [**Sign up**](https://aka.ms/lowcode-february/devplan) for the free Power Apps Developer Plan.\\n* 2\ufe0f\u20e3 [**Enroll**](https://aka.ms/lowcode-february/challenge) in the Cloud Skills Challenge and start climbing that leaderboard!\\n* 3\ufe0f\u20e3 [**Save**](http://aka.ms/lowcode-february) the page to start your learning on Feb 1, and [**Subscribe**](https://microsoft.github.io/Low-Code/blog/rss.xml) to the blog in your favorite feed reader for updates. \\n\\nReady to get started being a low-code developer, or a pro-dev supporting fusion teams and low code app development?\\n\\n\ud83c\udfc1 **#Lets Go!**\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Technologies used for fusion development](01%20-%20Kickoff.png)"}]}')}}]);